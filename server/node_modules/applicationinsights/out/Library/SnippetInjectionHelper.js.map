{"version":3,"file":"SnippetInjectionHelper.js","sourceRoot":"","sources":["../../Library/SnippetInjectionHelper.ts"],"names":[],"mappings":"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","sourcesContent":["import zlib = require(\"zlib\");\r\nimport { promisify } from \"util\";\r\nimport http = require(\"http\");\r\n\r\n// currently support the following encoding types\r\nexport enum contentEncodingMethod {\r\n    GZIP = \"gzip\",\r\n    DEFLATE = \"deflate\",\r\n    BR = \"br\"\r\n}\r\n\r\n//current supported encoding types\r\nexport const bufferEncodingTypes = [\"utf8\",\"utf16le\",\"latin1\",\"base64\",\"hex\",\"ascii\",\"binary\",\"ucs2\"];\r\n\r\n//for node version under 10, Brotli compression is not supported.\r\nexport const isBrotliSupperted = (): boolean => {\r\n    const majVer = process.versions.node.split(\".\")[0];\r\n    return parseInt(majVer) >= 10;\r\n}\r\n\r\nexport const gzipAsync = promisify(zlib.gzip);\r\nexport const gunzipAsync = promisify(zlib.gunzip);\r\nexport const deflateAsync = promisify(zlib.deflate);\r\nexport const inflateAsync = promisify(zlib.inflate);\r\n\r\nexport const getBrotliCompressAsync = (zlibObject: any): Function => {\r\n    let isMajorVer = isBrotliSupperted();\r\n    if (isMajorVer && typeof zlibObject.brotliCompress === \"function\") {\r\n        return promisify(zlibObject.brotliCompress);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const getBrotliCompressSync = (zlibObject: any): Function => {\r\n    let isMajorVer = isBrotliSupperted();\r\n    if (isMajorVer && typeof zlibObject.brotliCompressSync === \"function\") {\r\n        return zlibObject.brotliCompressSync;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const getBrotliDecompressAsync = (zlibObject: any): Function => {\r\n    let isMajorVer = isBrotliSupperted();\r\n    if (isMajorVer && typeof zlibObject.brotliDecompress === \"function\") {\r\n        return promisify(zlibObject.brotliDecompress);\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const getBrotliDecompressSync = (zlibObject: any): Function => {\r\n    let isMajorVer = isBrotliSupperted();\r\n    if (isMajorVer && typeof zlibObject.brotliDecompressSync === \"function\") {\r\n        return zlibObject.brotliDecompressSync;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport const isBufferType = (buffer: Buffer, type?:string): boolean => {\r\n    let encodingType = type? type:\"utf8\";\r\n    let result = false;\r\n    if (Buffer.isEncoding(encodingType)) {\r\n        let newBuffer = Buffer.from(buffer.toString(encodingType),encodingType);\r\n        result = newBuffer.toJSON().data.toString() === buffer.toJSON().data.toString();\r\n    }\r\n    \r\n    return result;\r\n}\r\n\r\nexport const findBufferEncodingType = (buffer: Buffer): string =>  {\r\n    let bufferType = null;\r\n    for (let key in bufferEncodingTypes) {\r\n        let type = bufferEncodingTypes[key]\r\n        if (Buffer.isEncoding(type) && isBufferType(buffer, type) ) {\r\n            bufferType = type;\r\n            break;\r\n        }\r\n    }\r\n    return bufferType;\r\n}\r\n\r\nexport const isSupportedContentEncoding = (encodingMethod: string): contentEncodingMethod => {\r\n    let encodingType = null;\r\n    switch (encodingMethod) {\r\n        case \"gzip\":\r\n            encodingType = contentEncodingMethod.GZIP;\r\n            break;\r\n        case \"br\":\r\n            encodingType = contentEncodingMethod.BR;\r\n            break;\r\n        case \"deflate\":\r\n            encodingType = contentEncodingMethod.DEFLATE;\r\n            break;\r\n        default:\r\n    }\r\n    return encodingType;\r\n}\r\n\r\n// mutiple content-encoding is not supported\r\n// for mutiple content-encoding, this method will return any empty array\r\nexport const getContentEncodingFromHeaders = (response: http.ServerResponse): contentEncodingMethod[] => {\r\n    let headers: contentEncodingMethod[] = [];\r\n    let contentEncodingHeaders = response.getHeader(\"Content-Encoding\");\r\n    if (!contentEncodingHeaders) return null;\r\n    if (typeof contentEncodingHeaders === \"string\") {\r\n        let supportedContentEncoding = isSupportedContentEncoding(contentEncodingHeaders);\r\n        if (supportedContentEncoding) { headers.push(supportedContentEncoding); }\r\n    }\r\n    return headers;\r\n}\r\n\r\nexport const insertSnippetByIndex = (index: number, html: string, snippet: string): string => {\r\n    if (index < 0) return null;\r\n    let newHtml = null;\r\n    let subStart = html.substring(0, index);\r\n    let subEnd = html.substring(index);\r\n    newHtml = subStart + \"<script type=\\\"text/javascript\\\">\" + snippet + \"</script>\" + subEnd;\r\n    return newHtml;\r\n}\r\n\r\nexport const isContentTypeHeaderHtml = (response: http.ServerResponse): boolean => {\r\n    let isHtml = false;\r\n    let contentType = response.getHeader(\"Content-Type\");\r\n    if (contentType) {\r\n        if (typeof contentType === \"string\") {\r\n            isHtml = contentType.indexOf(\"html\") >= 0;\r\n        } else {\r\n            isHtml = contentType.toString().indexOf(\"html\") >= 0;\r\n        }\r\n    }\r\n    return isHtml;\r\n}\r\n\r\n"]}