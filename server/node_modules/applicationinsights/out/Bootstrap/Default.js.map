{"version":3,"file":"Default.js","sourceRoot":"","sources":["../../Bootstrap/Default.ts"],"names":[],"mappings":"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","sourcesContent":["import type { TokenCredential } from \"@azure/core-auth\";\r\nimport * as types from \"../applicationinsights\";\r\nimport * as Helpers from \"./Helpers\";\r\nimport Constants = require(\"../Declarations/Constants\");\r\nimport { StatusLogger } from \"./StatusLogger\";\r\nimport { DiagnosticLogger } from \"./DiagnosticLogger\";\r\nimport Config = require(\"../Library/Config\");\r\nimport { DiagnosticLog, DiagnosticMessageId } from \"./DataModel\";\r\nimport * as PrefixHelpers from \"../Library/PrefixHelper\";\r\nimport Context = require(\"../Library/Context\");\r\n\r\n// Private configuration vars\r\nlet _appInsights: typeof types | null;\r\n\r\nexport const defaultConfig = new Config(); // Will read env variables, expose for Agent initialization\r\nlet _prefix = `${PrefixHelpers.getResourceProvider()}${PrefixHelpers.getOsPrefix()}${Constants.AttachTypePrefix.INTEGRATED_AUTO}_`;\r\nlet _fullSdkVersion = `${_prefix}node:${Context.sdkVersion}`;\r\nconst _instrumentationKey = defaultConfig.instrumentationKey;\r\nlet _logger: DiagnosticLogger = new DiagnosticLogger(console, _instrumentationKey);\r\nlet _statusLogger: StatusLogger = new StatusLogger(console, _instrumentationKey);\r\n\r\n// Env var local constants\r\nconst forceStart = process.env.APPLICATIONINSIGHTS_FORCE_START === \"true\";\r\n\r\n\r\n/**\r\n * Sets the attach-time logger\r\n * @param logger logger which implements the `AgentLogger` interface\r\n */\r\nexport function setLogger(logger: DiagnosticLogger) {\r\n    return _logger = logger;\r\n}\r\n\r\nexport function setStatusLogger(statusLogger: StatusLogger) {\r\n    _statusLogger = statusLogger;\r\n}\r\n\r\n/**\r\n * Try to setup and start this app insights instance if attach is enabled.\r\n * @param aadTokenCredential Optional AAD credential\r\n */\r\nexport function setupAndStart(aadTokenCredential?: TokenCredential, isAzureFunction?: boolean): typeof types | null {\r\n    // If app already contains SDK, skip agent attach\r\n    if (!forceStart && Helpers.sdkAlreadyExists(_logger)) {\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: false,\r\n            SDKPresent: true,\r\n            Reason: \"Application Insights SDK already exists.\"\r\n        })\r\n        return null;\r\n    }\r\n    if (!defaultConfig.instrumentationKey) {\r\n        const diagnosticLog: DiagnosticLog = {\r\n            message: \"Application Insights wanted to be started, but no Connection String was provided\",\r\n            properties: {\r\n                \"msgId\": DiagnosticMessageId.missingIkey\r\n            }\r\n        };\r\n        _logger.logError(diagnosticLog);\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: false,\r\n            Reason: diagnosticLog.message\r\n        });\r\n        return null;\r\n    }\r\n\r\n    try {\r\n        _appInsights = require(\"../applicationinsights\");\r\n        if (_appInsights.defaultClient) {\r\n            // setupAndStart was already called, return the result\r\n            const diagnosticLog: DiagnosticLog = {\r\n                message: \"Setup was attempted on the Application Insights Client multiple times. Aborting and returning the first client instance.\",\r\n                properties: {\r\n                    \"msgId\": DiagnosticMessageId.setupAlreadyCalled\r\n                }\r\n            };\r\n            _logger.logError(diagnosticLog);\r\n            return _appInsights;\r\n        }\r\n\r\n        /** Sets the SDK version prefix in auto-attach scenarios */\r\n        const prefixInternalSdkVersion = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\r\n            // If SDK version prefix is not set - set it using {RP}{OS}{Attach Type}_ pattern\r\n            try {\r\n                envelope.tags[appInsightsSDKVersion] = _fullSdkVersion;\r\n            } catch (e) {\r\n                const diagnosticLog: DiagnosticLog = {\r\n                    message: \"Error prefixing SDK version.\",\r\n                    exception: e,\r\n                    properties: {\r\n                        \"msgId\": DiagnosticMessageId.prefixFailed\r\n                    }\r\n                };\r\n                _logger.logError(diagnosticLog);\r\n            }\r\n            return true;\r\n        }\r\n\r\n        const copyOverPrefixInternalSdkVersionToHeartBeatMetric = function (envelope: types.Contracts.Envelope, _contextObjects: Object) {\r\n            var appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\r\n            const sdkVersion = envelope.tags[appInsightsSDKVersion] || \"\";\r\n            if (envelope.name === Constants.HeartBeatMetricName) {\r\n                ((envelope.data as any).baseData).properties = ((envelope.data as any).baseData).properties || {};\r\n                ((envelope.data as any).baseData).properties[\"sdk\"] = sdkVersion;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        // Instrument the SDK\r\n        Context.sdkPrefix = _prefix;\r\n        _appInsights.setup();\r\n        const appInsightsSDKVersion = _appInsights.defaultClient.context.keys.internalSdkVersion;\r\n\r\n        // Azure Functions\r\n        if (isAzureFunction) {\r\n            // Agent will always run in parallel with Azure Functions .NET Agent, disable requests and exceptions to avoid duplication of telemetry\r\n\r\n            // Check if config is not already setup by JSON or env variables\r\n            if (_appInsights.defaultClient.config.enableSendLiveMetrics === undefined) {\r\n                _appInsights.defaultClient.config.enableSendLiveMetrics = false;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectPerformance === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectPerformance = false;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectPreAggregatedMetrics === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectPreAggregatedMetrics = false;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectIncomingRequestAzureFunctions === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectIncomingRequestAzureFunctions = false;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectRequests === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectRequests = false;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectDependencies === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectDependencies = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectHeartbeat === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectHeartbeat = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableUseDiskRetryCaching === undefined) {\r\n                _appInsights.defaultClient.config.enableUseDiskRetryCaching = true;\r\n            }\r\n        }\r\n        // App Services\r\n        else {\r\n             // Check if config is not already setup by JSON or env variables\r\n             if (_appInsights.defaultClient.config.enableSendLiveMetrics === undefined) {\r\n                _appInsights.defaultClient.config.enableSendLiveMetrics = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectPerformance === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectPerformance = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectPreAggregatedMetrics === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectPreAggregatedMetrics = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectIncomingRequestAzureFunctions === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectIncomingRequestAzureFunctions = false;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectRequests === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectRequests = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectDependencies === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectDependencies = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableAutoCollectHeartbeat === undefined) {\r\n                _appInsights.defaultClient.config.enableAutoCollectHeartbeat = true;\r\n            }\r\n            if (_appInsights.defaultClient.config.enableUseDiskRetryCaching === undefined) {\r\n                _appInsights.defaultClient.config.enableUseDiskRetryCaching = true;\r\n            }\r\n        }\r\n        _appInsights.defaultClient.addTelemetryProcessor(prefixInternalSdkVersion);\r\n        _appInsights.defaultClient.addTelemetryProcessor(copyOverPrefixInternalSdkVersionToHeartBeatMetric);\r\n        if (aadTokenCredential) {\r\n            const diagnosticLog: DiagnosticLog = {\r\n                message: \"Application Insights using AAD Token Credential.\",\r\n                properties: {\r\n                    \"msgId\": DiagnosticMessageId.aadEnabled\r\n                }\r\n            };\r\n            _logger.logMessage(diagnosticLog);\r\n            _appInsights.defaultClient.config.aadTokenCredential = aadTokenCredential;\r\n        }\r\n\r\n        _appInsights.start();\r\n        // Set the SDK verison in the context\r\n        _appInsights.defaultClient.context.tags[appInsightsSDKVersion] = _fullSdkVersion;\r\n        // Add attach flag in Statsbeat\r\n        let statsbeat = _appInsights.defaultClient.getStatsbeat();\r\n        if (statsbeat) {\r\n            statsbeat.setCodelessAttach();\r\n        }\r\n\r\n        // Agent successfully instrumented the SDK\r\n        const diagnosticLog: DiagnosticLog = {\r\n            message: \"Application Insights was started succesfully.\",\r\n            properties: {\r\n                \"msgId\": DiagnosticMessageId.attachSuccessful\r\n            }\r\n        };\r\n        _logger.logMessage(diagnosticLog);\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: true\r\n        });\r\n    } catch (e) {\r\n        const diagnosticLog: DiagnosticLog = {\r\n            message: \"Error setting up Application Insights.\",\r\n            exception: e,\r\n            properties: {\r\n                \"msgId\": DiagnosticMessageId.unknownError\r\n            }\r\n        };\r\n        _logger.logError(diagnosticLog);\r\n        _statusLogger.logStatus({\r\n            ...StatusLogger.DEFAULT_STATUS,\r\n            AgentInitializedSuccessfully: false,\r\n            Reason: `Error setting up Application Insights: ${e && e.message}`\r\n        })\r\n    }\r\n    return _appInsights;\r\n}\r\n\r\n"]}