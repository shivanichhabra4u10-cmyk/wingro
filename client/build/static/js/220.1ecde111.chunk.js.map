{"version":3,"file":"static/js/220.1ecde111.chunk.js","mappings":"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","sources":["pages/Login.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate, useLocation } from 'react-router-dom';\r\nimport * as Yup from 'yup';\r\nimport { FormWrapper, FormField } from '../components';\r\nimport { useAuth } from '../context/AuthContext';\r\n\r\ninterface LoginFormValues {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nconst validationSchema = Yup.object().shape({\r\n  email: Yup.string()\r\n    .email('Invalid email address')\r\n    .required('Email is required'),\r\n  password: Yup.string()\r\n    .min(6, 'Password must be at least 6 characters')\r\n    .required('Password is required'),\r\n});\r\n\r\nconst Login = () => {\r\n  const [showForgot, setShowForgot] = useState(false);\r\n  const [forgotEmail, setForgotEmail] = useState('');\r\n  const [forgotLoading, setForgotLoading] = useState(false);\r\n  const [forgotMsg, setForgotMsg] = useState('');\r\n  const [showOtp, setShowOtp] = useState(false);\r\n  const [otpPhone, setOtpPhone] = useState('');\r\n  const [otpSent, setOtpSent] = useState(false);\r\n  const [otpCode, setOtpCode] = useState('');\r\n  const [otpError, setOtpError] = useState('');\r\n  const [otpLoading, setOtpLoading] = useState(false);\r\n  // Replace with your Google OAuth client ID and redirect URI\r\n  const GOOGLE_CLIENT_ID = 'YOUR_GOOGLE_CLIENT_ID';\r\n  const GOOGLE_REDIRECT_URI = 'http://localhost:3001/auth/google/callback';\r\n\r\n  const getGoogleOAuthUrl = () => {\r\n    const base = 'https://accounts.google.com/o/oauth2/v2/auth';\r\n    const params = new URLSearchParams({\r\n      client_id: GOOGLE_CLIENT_ID,\r\n      redirect_uri: GOOGLE_REDIRECT_URI,\r\n      response_type: 'token',\r\n      scope: 'openid email profile',\r\n      prompt: 'select_account',\r\n    });\r\n    return `${base}?${params.toString()}`;\r\n  };\r\n  const { login } = useAuth();\r\n  const navigate = useNavigate();\r\n  const location = useLocation();\r\n  const [loading, setLoading] = useState<boolean>(false);\r\n  // Simulate fetching settings from backend or context\r\n  const [googleSSOEnabled, setGoogleSSOEnabled] = useState(true);\r\n  const [testGoogleToken, setTestGoogleToken] = useState('');\r\n  const handleSubmit = async (values: LoginFormValues) => {\r\n  await login(values.email, values.password);\r\n  const redirectTo = (location.state && location.state.from) ? location.state.from : '/';\r\n  navigate(redirectTo);\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-gray-50 flex flex-col items-center pt-12\">\r\n      <div className=\"sm:mx-auto sm:w-full sm:max-w-md bg-white rounded-xl shadow-lg p-8\">\r\n        <h2 className=\"text-center text-3xl font-extrabold text-blue-900 mb-2\">\r\n          Sign in to your account\r\n        </h2>\r\n        <p className=\"text-center text-sm text-gray-600 mb-6\">\r\n          Or{' '}\r\n          <Link\r\n            to=\"/register\"\r\n            className=\"font-medium text-cyan-600 hover:text-cyan-500\"\r\n          >\r\n            create a new account\r\n          </Link>\r\n        </p>\r\n        {!showOtp && !showForgot ? (\r\n          <>\r\n            <FormWrapper\r\n              initialValues={{ email: '', password: '' }}\r\n              validationSchema={validationSchema}\r\n              onSubmit={handleSubmit}\r\n              submitButton={{\r\n                text: 'Sign in',\r\n                props: { className: 'w-full', variant: 'primary' },\r\n              }}\r\n            >\r\n            <FormField\r\n              label=\"Email address\"\r\n              name=\"email\"\r\n              type=\"email\"\r\n              autoComplete=\"email\"\r\n            />\r\n            <FormField\r\n              label=\"Password\"\r\n              name=\"password\"\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n            />\r\n            <div className=\"w-full flex justify-end mt-1\">\r\n              <span\r\n                className=\"text-xs text-gray-400 hover:text-cyan-600 cursor-pointer underline\"\r\n                onClick={() => setShowForgot(true)}\r\n                role=\"link\"\r\n              >\r\n                Forgot password?\r\n              </span>\r\n            </div>\r\n            </FormWrapper>\r\n            {/* Forgot password link moved above, styled as small subtle button */}\r\n            <div className=\"mt-6 flex flex-col gap-2 items-center\">\r\n              <button\r\n                type=\"button\"\r\n                className=\"w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium bg-white text-gray-800 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition\"\r\n                onClick={async () => {\r\n                  if (googleSSOEnabled) {\r\n                    window.location.href = getGoogleOAuthUrl();\r\n                  } else {\r\n                    let token = testGoogleToken;\r\n                    if (!token) {\r\n                      token = window.prompt('Paste test Google ID token here') || '';\r\n                      setTestGoogleToken(token);\r\n                    }\r\n                    const phone = window.prompt('Enter phone (optional, for first time)');\r\n                    fetch('http://localhost:5000/api/auth/login/google', {\r\n                      method: 'POST',\r\n                      headers: { 'Content-Type': 'application/json' },\r\n                      credentials: 'include',\r\n                      body: JSON.stringify({ token, phone })\r\n                    }).then(res => res.json()).then(data => {\r\n                      alert('Google login successful!');\r\n                      window.location.reload();\r\n                    }).catch(() => alert('Google login failed'));\r\n                  }\r\n                }}\r\n              >\r\n                Sign in with Google\r\n              </button>\r\n              <button\r\n                type=\"button\"\r\n                className=\"w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium bg-white text-gray-800 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition\"\r\n                onClick={() => setShowOtp(true)}\r\n              >\r\n                Login with OTP\r\n              </button>\r\n            </div>\r\n          </>\r\n        ) : showForgot ? (\r\n          <div className=\"mt-6\">\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Enter your email to reset password</label>\r\n            <input\r\n              type=\"email\"\r\n              value={forgotEmail}\r\n              onChange={e => setForgotEmail(e.target.value)}\r\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-2 mb-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n              placeholder=\"you@example.com\"\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              className=\"w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium bg-white text-gray-800 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition\"\r\n              onClick={async () => {\r\n                setForgotLoading(true);\r\n                setForgotMsg('');\r\n                try {\r\n                  const res = await fetch('http://localhost:3001/api/auth/request-password-reset', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ email: forgotEmail }),\r\n                  });\r\n                  if (res.ok) {\r\n                    setForgotMsg('If this email exists, a reset link will be sent.');\r\n                  } else {\r\n                    const data = await res.json();\r\n                    setForgotMsg(data.error || 'Failed to send reset link.');\r\n                  }\r\n                } catch (err) {\r\n                  setForgotMsg('Network error. Please try again.');\r\n                }\r\n                setForgotLoading(false);\r\n              }}\r\n              disabled={forgotLoading || !forgotEmail}\r\n            >\r\n              {forgotLoading ? 'Sending...' : 'Send Reset Link'}\r\n            </button>\r\n            <button\r\n              type=\"button\"\r\n              className=\"w-full flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm text-sm font-medium bg-white text-gray-800 hover:bg-gray-100 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition mt-2\"\r\n              onClick={() => {\r\n                setShowForgot(false);\r\n                setForgotEmail('');\r\n                setForgotMsg('');\r\n              }}\r\n            >\r\n              Back to Login\r\n            </button>\r\n            {forgotMsg && <div className=\"mt-2 text-green-600 text-center\">{forgotMsg}</div>}\r\n          </div>\r\n        ) : (\r\n          <div className=\"mt-6\">\r\n            <label className=\"block text-sm font-medium text-gray-700 mb-2\">Phone Number</label>\r\n            <input\r\n              type=\"tel\"\r\n              value={otpPhone}\r\n              onChange={e => setOtpPhone(e.target.value)}\r\n              className=\"w-full border border-gray-300 rounded-lg px-4 py-2 mb-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n              placeholder=\"Enter your phone number\"\r\n            />\r\n            {!otpSent ? (\r\n              <button\r\n                type=\"button\"\r\n                className=\"w-full bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg shadow hover:bg-indigo-700 transition\"\r\n                onClick={async () => {\r\n                  setOtpLoading(true);\r\n                  setOtpError('');\r\n                  // Call backend to send OTP\r\n                  const res = await fetch('/api/auth/send-otp', {\r\n                    method: 'POST',\r\n                    headers: { 'Content-Type': 'application/json' },\r\n                    body: JSON.stringify({ phone: otpPhone })\r\n                  });\r\n                  const data = await res.json();\r\n                  if (res.ok) {\r\n                    setOtpSent(true);\r\n                  } else {\r\n                    setOtpError(data.error || 'Failed to send OTP');\r\n                  }\r\n                  setOtpLoading(false);\r\n                }}\r\n                disabled={otpLoading || !otpPhone}\r\n              >\r\n                {otpLoading ? 'Sending OTP...' : 'Send OTP'}\r\n              </button>\r\n            ) : (\r\n              <>\r\n                <label className=\"block text-sm font-medium text-gray-700 mb-2 mt-4\">Enter OTP</label>\r\n                <input\r\n                  type=\"text\"\r\n                  value={otpCode}\r\n                  onChange={e => setOtpCode(e.target.value)}\r\n                  className=\"w-full border border-gray-300 rounded-lg px-4 py-2 mb-2 focus:outline-none focus:ring-2 focus:ring-indigo-500\"\r\n                  placeholder=\"Enter OTP code\"\r\n                />\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"w-full bg-indigo-600 text-white font-bold py-2 px-4 rounded-lg shadow hover:bg-indigo-700 transition\"\r\n                  onClick={async () => {\r\n                    setOtpLoading(true);\r\n                    setOtpError('');\r\n                    // Call backend to verify OTP\r\n                    const res = await fetch('/api/auth/verify-otp', {\r\n                      method: 'POST',\r\n                      headers: { 'Content-Type': 'application/json' },\r\n                      body: JSON.stringify({ phone: otpPhone, otp: otpCode })\r\n                    });\r\n                    const data = await res.json();\r\n                    if (res.ok) {\r\n                      window.location.reload();\r\n                    } else {\r\n                      setOtpError(data.error || 'Invalid OTP');\r\n                    }\r\n                    setOtpLoading(false);\r\n                  }}\r\n                  disabled={otpLoading || !otpCode}\r\n                >\r\n                  {otpLoading ? 'Verifying...' : 'Verify OTP & Login'}\r\n                </button>\r\n                <button\r\n                  type=\"button\"\r\n                  className=\"w-full mt-2 text-indigo-600 hover:underline\"\r\n                  onClick={() => {\r\n                    setShowOtp(false);\r\n                    setOtpPhone('');\r\n                    setOtpSent(false);\r\n                    setOtpCode('');\r\n                    setOtpError('');\r\n                  }}\r\n                >\r\n                  Back to Email/Password Login\r\n                </button>\r\n              </>\r\n            )}\r\n            {otpError && <div className=\"mt-2 text-red-600 text-center\">{otpError}</div>}\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Login;\r\n\r\n// Duplicate component and export removed. Only one Login component and export default remain.\r\n"],"names":["validationSchema","Yup","shape","email","required","password","min","Login","showForgot","setShowForgot","useState","forgotEmail","setForgotEmail","forgotLoading","setForgotLoading","forgotMsg","setForgotMsg","showOtp","setShowOtp","otpPhone","setOtpPhone","otpSent","setOtpSent","otpCode","setOtpCode","otpError","setOtpError","otpLoading","setOtpLoading","login","useAuth","navigate","useNavigate","location","useLocation","loading","setLoading","googleSSOEnabled","setGoogleSSOEnabled","testGoogleToken","setTestGoogleToken","_jsx","className","children","_jsxs","Link","to","type","value","onChange","e","target","placeholder","onClick","async","res","fetch","method","headers","body","JSON","stringify","ok","data","json","error","err","disabled","_Fragment","phone","otp","window","reload","FormWrapper","initialValues","onSubmit","values","redirectTo","state","from","submitButton","text","props","variant","FormField","label","name","autoComplete","role","href","URLSearchParams","client_id","redirect_uri","response_type","scope","prompt","toString","token","credentials","then","alert","catch"],"sourceRoot":""}