{"version":3,"file":"static/js/32.635a7040.chunk.js","mappings":"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","sources":["services/assessmentScoringService.js","components/ProfileResultsCard.tsx","pages/CareerAssessment.tsx"],"sourcesContent":["/**\r\n * Assessment Scoring Service\r\n * This module handles scoring logic for all assessment types\r\n * Currently implemented for 9-10 grade students\r\n * Can be extended for 11-12 grade and professional assessments\r\n */\r\n\r\nimport assessmentData from '../data/student-9-10-questions-with-scoring.json';\r\nimport { createAssessmentScorer } from '../utils/assessmentScoringUtils';\r\n\r\n// Import other assessment data when available\r\n// import student1112Data from '../data/student-11-12-questions-with-scoring.json';\r\n// import professionalData from '../data/professional-questions-with-scoring.json';\r\n\r\n/**\r\n * Calculate scores for each dimension based on user responses\r\n * @param {Object} responses - Object with question IDs as keys and selected option letters as values\r\n * @returns {Object} Calculated scores and profile results\r\n */\r\nexport const calculateAssessmentScores = (responses) => {\r\n  if (!responses || Object.keys(responses).length === 0) {\r\n    return {\r\n      error: 'No responses provided'\r\n    };\r\n  }\r\n\r\n  try {\r\n    const { questions, assessmentMetadata } = assessmentData;\r\n    const { scoringDimensions, resultProfiles } = assessmentMetadata;\r\n    \r\n    // Group and score by category instead of dimensionId\r\n    const categoryScores = {};\r\n    const categoryMeta = {};\r\n    questions.forEach(question => {\r\n      const { id, category, options, scoringLogic = 'sum' } = question;\r\n      const responseOption = responses[id];\r\n      if (!responseOption) return;\r\n      const selectedOption = options.find(opt => opt.option === responseOption);\r\n      if (!selectedOption) return;\r\n      if (!categoryScores[category]) {\r\n        categoryScores[category] = { rawScore: 0, maxPossibleScore: 0 };\r\n        // Try to find matching dimension metadata by category\r\n        const meta = scoringDimensions.find(dim => category.toLowerCase().includes(dim.name.toLowerCase()));\r\n        categoryMeta[category] = meta || null;\r\n      }\r\n      switch (scoringLogic) {\r\n        case 'sum':\r\n        default:\r\n          categoryScores[category].rawScore += selectedOption.score;\r\n          const maxScoreForQuestion = Math.max(...options.map(opt => opt.score));\r\n          categoryScores[category].maxPossibleScore += maxScoreForQuestion;\r\n          break;\r\n      }\r\n    });\r\n\r\n    // Calculate percentage scores and levels for each category\r\n    const dimensionScores = {};\r\n    Object.keys(categoryScores).forEach(category => {\r\n      const { rawScore, maxPossibleScore } = categoryScores[category];\r\n      const meta = categoryMeta[category];\r\n      let percentageScore = maxPossibleScore > 0 ? Math.round((rawScore / maxPossibleScore) * 100) : 0;\r\n      let level = 'low';\r\n      if (meta) {\r\n        if (percentageScore >= meta.thresholds.high) {\r\n          level = 'high';\r\n        } else if (percentageScore >= meta.thresholds.medium) {\r\n          level = 'medium';\r\n        }\r\n      }\r\n      dimensionScores[category] = {\r\n        rawScore,\r\n        maxPossibleScore,\r\n        percentageScore,\r\n        level,\r\n        dimensionName: category,\r\n        dimensionDescription: meta ? meta.description : ''\r\n      };\r\n    });\r\n    \r\n    // Determine matching result profiles\r\n    const matchingProfiles = resultProfiles.filter(profile => {\r\n      // Check if the profile conditions match the user's scores\r\n      return Object.entries(profile.conditions).every(([dimensionId, requiredLevel]) => {\r\n        const userLevel = dimensionScores[dimensionId]?.level;\r\n        \r\n        // Handle combined levels like \"low-medium\"\r\n        if (requiredLevel.includes('-')) {\r\n          const acceptableLevels = requiredLevel.split('-');\r\n          return acceptableLevels.includes(userLevel);\r\n        }\r\n        \r\n        return userLevel === requiredLevel;\r\n      });\r\n    });\r\n    \r\n    // Find primary profile (first match)\r\n    const primaryProfile = matchingProfiles.length > 0 ? matchingProfiles[0] : null;\r\n    \r\n    return {\r\n      dimensionScores,\r\n      primaryProfile,\r\n      allMatchingProfiles: matchingProfiles,\r\n      responseCount: Object.keys(responses).length,\r\n      totalQuestions: questions.length,\r\n      completionPercentage: Math.round((Object.keys(responses).length / questions.length) * 100)\r\n    };\r\n  } catch (error) {\r\n    console.error('Error calculating assessment scores:', error);\r\n    return {\r\n      error: 'Failed to calculate scores',\r\n      details: error.message\r\n    };\r\n  }\r\n};\r\n\r\n/**\r\n * Get recommended next steps based on assessment results\r\n * @param {Object} scores - The calculated scores from calculateAssessmentScores\r\n * @returns {Array} Array of recommendation objects\r\n */\r\nexport const getRecommendations = (scores) => {\r\n  if (!scores || scores.error) return [];\r\n  \r\n  const { dimensionScores, primaryProfile } = scores;\r\n  const recommendations = [];\r\n  \r\n  // Recommendations based on dimension scores\r\n  if (dimensionScores.clarity && dimensionScores.clarity.level === 'low') {\r\n    recommendations.push({\r\n      id: 'rec-1',\r\n      type: 'activity',\r\n      title: 'Career Exploration Workshop',\r\n      description: 'Take our career exploration workshop to discover careers that match your interests and strengths.',\r\n      priority: 'high'\r\n    });\r\n  }\r\n  \r\n  if (dimensionScores.confidence && dimensionScores.confidence.level === 'low') {\r\n    recommendations.push({\r\n      id: 'rec-2',\r\n      type: 'resource',\r\n      title: 'Stream Selection Guide',\r\n      description: 'Read our comprehensive guide to selecting the right academic stream after 10th grade.',\r\n      priority: 'high'\r\n    });\r\n  }\r\n  \r\n  if (dimensionScores.exploration && dimensionScores.exploration.level === 'low') {\r\n    recommendations.push({\r\n      id: 'rec-3',\r\n      type: 'activity',\r\n      title: 'Career Shadowing',\r\n      description: 'Participate in our career shadowing program to gain first-hand experience in different fields.',\r\n      priority: 'medium'\r\n    });\r\n  }\r\n  \r\n  if (dimensionScores.resilience && dimensionScores.resilience.level === 'low') {\r\n    recommendations.push({\r\n      id: 'rec-4',\r\n      type: 'workshop',\r\n      title: 'Building Academic Resilience',\r\n      description: 'Join our workshop on developing resilience and coping with academic challenges.',\r\n      priority: 'medium'\r\n    });\r\n  }\r\n  \r\n  // Profile-based recommendations\r\n  if (primaryProfile) {\r\n    switch (primaryProfile.id) {\r\n      case 'career-explorer':\r\n        recommendations.push({\r\n          id: 'rec-5',\r\n          type: 'assessment',\r\n          title: 'Career Aptitude Test',\r\n          description: 'Take our detailed career aptitude test to identify specific fields that match your strengths.',\r\n          priority: 'high'\r\n        });\r\n        break;\r\n        \r\n      case 'focused-planner':\r\n        recommendations.push({\r\n          id: 'rec-6',\r\n          type: 'resource',\r\n          title: 'Academic Roadmap',\r\n          description: 'Create a personalized academic roadmap to achieve your career goals.',\r\n          priority: 'medium'\r\n        });\r\n        break;\r\n        \r\n      case 'resilient-learner':\r\n        recommendations.push({\r\n          id: 'rec-7',\r\n          type: 'coaching',\r\n          title: 'Career Coaching',\r\n          description: 'Schedule a one-on-one career coaching session to help develop a clearer direction.',\r\n          priority: 'high'\r\n        });\r\n        break;\r\n        \r\n      case 'needs-guidance':\r\n        recommendations.push({\r\n          id: 'rec-8',\r\n          type: 'program',\r\n          title: 'Structured Career Guidance Program',\r\n          description: 'Enroll in our 8-week career guidance program designed for students who need more direction.',\r\n          priority: 'high'\r\n        });\r\n        break;\r\n        \r\n      default:\r\n        recommendations.push({\r\n          id: 'rec-9',\r\n          type: 'consultation',\r\n          title: 'Career Counseling Session',\r\n          description: 'Book a career counseling session to discuss your assessment results and next steps.',\r\n          priority: 'medium'\r\n        });\r\n    }\r\n  }\r\n  \r\n  return recommendations;\r\n};\r\n\r\n/**\r\n * Generate a summary report based on assessment results\r\n * @param {Object} scores - The calculated scores from calculateAssessmentScores\r\n * @returns {Object} Summary report\r\n */\r\nexport const generateSummaryReport = (scores) => {\r\n  if (!scores || scores.error) {\r\n    return { error: scores?.error || 'Invalid scores' };\r\n  }\r\n  \r\n  const { dimensionScores, primaryProfile, completionPercentage } = scores;\r\n  \r\n  // Generate strengths and areas for improvement\r\n  const strengths = Object.values(dimensionScores)\r\n    .filter(dimension => dimension.level === 'high')\r\n    .map(dimension => ({\r\n      area: dimension.dimensionName,\r\n      description: dimension.dimensionDescription,\r\n      score: dimension.percentageScore\r\n    }));\r\n  \r\n  const improvements = Object.values(dimensionScores)\r\n    .filter(dimension => dimension.level === 'low')\r\n    .map(dimension => ({\r\n      area: dimension.dimensionName,\r\n      description: dimension.dimensionDescription,\r\n      score: dimension.percentageScore\r\n    }));\r\n  \r\n  // Get recommendations\r\n  const recommendations = getRecommendations(scores);\r\n  \r\n  return {\r\n    summary: primaryProfile ? primaryProfile.description : 'Assessment completed. See detailed results below.',\r\n    profileName: primaryProfile ? primaryProfile.name : 'Custom Profile',\r\n    completionPercentage,\r\n    dimensionScores,\r\n    strengths,\r\n    improvementAreas: improvements,\r\n    recommendations: recommendations.slice(0, 3), // Top 3 recommendations\r\n    allRecommendations: recommendations\r\n  };\r\n};\r\n\r\n/**\r\n * Select and use the appropriate scoring system based on assessment type\r\n * @param {string} assessmentType - The type of assessment (student-9-10, student-11-12, professional)\r\n * @param {Object} responses - User's answers\r\n * @returns {Object} Scoring results\r\n */\r\nexport const calculateScoresByType = (assessmentType, responses) => {\r\n  if (!assessmentType || !responses) {\r\n    return { error: 'Invalid assessment type or responses' };\r\n  }\r\n  \r\n  try {\r\n    let questions, dimensions;\r\n    switch (assessmentType) {\r\n      case 'student-9-10':\r\n        return calculateAssessmentScores(responses);\r\n      case 'student-11-12':\r\n        questions = require('../data/student-11-12-questions.json');\r\n        break;\r\n      case 'professional':\r\n        questions = require('../data/professional-questions.json');\r\n        break;\r\n      case 'organization-early-startup':\r\n        questions = require('../data/early-startup-questions.json');\r\n        break;\r\n      case 'organization-established-startup':\r\n        questions = require('../data/established-startup-questions.json');\r\n        break;\r\n      default:\r\n        return { error: 'Unknown assessment type' };\r\n    }\r\n    if (!questions) return { error: 'Questions not found for assessment type' };\r\n    // Get all dimensions\r\n    dimensions = Array.from(new Set(questions.map(q => q.dimensionId)));\r\n    // Calculate scores by dimension\r\n    const dimensionScores = {};\r\n    const questionScores = {};\r\n    dimensions.forEach(dim => {\r\n      dimensionScores[dim] = { raw: 0, max: 0 };\r\n    });\r\n    questions.forEach(q => {\r\n      const answer = responses[q.id];\r\n      if (!answer) return;\r\n      const selectedOption = q.options.find(opt => opt.option === answer);\r\n      const score = selectedOption && typeof selectedOption.score === 'number' ? selectedOption.score : 0;\r\n      questionScores[q.id] = score;\r\n      dimensionScores[q.dimensionId].raw += score;\r\n      const maxForQ = Math.max(...q.options.map(opt => typeof opt.score === 'number' ? opt.score : 0));\r\n      dimensionScores[q.dimensionId].max += maxForQ;\r\n    });\r\n    // Calculate percentages\r\n    const categoryScores = {};\r\n    Object.keys(dimensionScores).forEach(dim => {\r\n      const { raw, max } = dimensionScores[dim];\r\n      categoryScores[dim] = max > 0 ? Math.round((raw / max) * 100) : 0;\r\n    });\r\n    // Overall score\r\n    const categoryValues = Object.values(categoryScores);\r\n    const overallScore = categoryValues.length > 0 ? Math.round(categoryValues.reduce((a, b) => a + b, 0) / categoryValues.length) : 0;\r\n    return {\r\n      dimensionScores: categoryScores,\r\n      overallScore,\r\n      questionScores\r\n    };\r\n  } catch (error) {\r\n    console.error('Error in assessment scoring:', error);\r\n    return { error: 'Scoring calculation failed', details: error.message };\r\n  }\r\n};\r\n\r\n/**\r\n * Get recommendations based on assessment type and scores\r\n * @param {string} assessmentType - The type of assessment\r\n * @param {Object} scores - Calculated scores\r\n * @returns {Array} Recommendations\r\n */\r\nexport const getRecommendationsByType = (assessmentType, scores) => {\r\n  if (!assessmentType || !scores) {\r\n    return [];\r\n  }\r\n  \r\n  try {\r\n    switch (assessmentType) {\r\n      case 'student-9-10':\r\n        return getRecommendations(scores);\r\n        \r\n      case 'student-11-12':\r\n      case 'professional':\r\n        // Return generic recommendations when specific ones aren't available\r\n        return [];\r\n        \r\n      default:\r\n        return [];\r\n    }\r\n  } catch (error) {\r\n    console.error('Error getting recommendations:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport default {\r\n  calculateAssessmentScores,\r\n  getRecommendations,\r\n  generateSummaryReport,\r\n  calculateScoresByType,\r\n  getRecommendationsByType\r\n};\r\n","import React from 'react';\r\n\r\ninterface ProfileResultsCardProps {\r\n  profile: any;\r\n  dimensionScores: any;\r\n  recommendations: any[];\r\n}\r\n\r\nconst ProfileResultsCard: React.FC<ProfileResultsCardProps> = ({ \r\n  profile, \r\n  dimensionScores,\r\n  recommendations \r\n}) => {\r\n  if (!profile) {\r\n    return null;\r\n  }\r\n\r\n  // Get top 3 recommendations\r\n  const topRecommendations = recommendations.slice(0, 3);\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-sm p-5 mb-6\">\r\n      <div className=\"flex items-center mb-4\">\r\n        <div className=\"bg-blue-600 p-3 rounded-full text-white mr-4\">\r\n          <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zm-4 7a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\r\n          </svg>\r\n        </div>\r\n        <div>\r\n          <h3 className=\"text-lg font-bold text-gray-800\">Your Profile: {profile.name}</h3>\r\n          <p className=\"text-gray-600\">{profile.description}</p>\r\n        </div>\r\n      </div>\r\n      \r\n      <div className=\"mb-4\">\r\n        <h4 className=\"font-semibold text-gray-700 mb-2\">Dimension Scores</h4>\r\n        <div className=\"space-y-2\">\r\n          {Object.entries(dimensionScores).map(([key, value]: [string, any]) => (\r\n            <div key={key} className=\"flex items-center\">\r\n              <div className=\"w-32 flex-shrink-0\">\r\n                <span className=\"text-sm font-medium text-gray-600\">{value.dimensionName}</span>\r\n              </div>\r\n              <div className=\"flex-1\">\r\n                <div className=\"w-full bg-gray-200 rounded-full h-2.5\">\r\n                  <div \r\n                    className={`h-2.5 rounded-full ${\r\n                      value.level === 'high' ? 'bg-green-500' : \r\n                      value.level === 'medium' ? 'bg-yellow-500' : 'bg-red-500'\r\n                    }`} \r\n                    style={{ width: `${value.percentageScore}%` }}\r\n                  ></div>\r\n                </div>\r\n              </div>\r\n              <div className=\"w-16 text-right\">\r\n                <span className=\"text-sm font-medium text-gray-600\">{value.percentageScore}%</span>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      \r\n      {topRecommendations.length > 0 && (\r\n        <div>\r\n          <h4 className=\"font-semibold text-gray-700 mb-2\">Top Recommendations</h4>\r\n          <ul className=\"space-y-2\">\r\n            {topRecommendations.map(recommendation => (\r\n              <li key={recommendation.id} className=\"flex items-start\">\r\n                <div className={`flex-shrink-0 w-5 h-5 mt-0.5 mr-2 rounded-full flex items-center justify-center ${\r\n                  recommendation.priority === 'high' ? 'bg-red-100 text-red-500' :\r\n                  recommendation.priority === 'medium' ? 'bg-yellow-100 text-yellow-600' :\r\n                  'bg-green-100 text-green-500'\r\n                }`}>\r\n                  <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-3 w-3\" viewBox=\"0 0 20 20\" fill=\"currentColor\">\r\n                    <path fillRule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clipRule=\"evenodd\" />\r\n                  </svg>\r\n                </div>\r\n                <div>\r\n                  <span className=\"block text-sm font-medium text-gray-700\">{recommendation.title}</span>\r\n                  <span className=\"block text-xs text-gray-500\">{recommendation.description}</span>\r\n                </div>\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileResultsCard;\r\n","import React, { useEffect, useState, useCallback } from 'react';\r\n// For PDF export\r\nimport html2pdf from 'html2pdf.js';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { toast, ToastContainer } from 'react-toastify';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { \r\n  Chart as ChartJS, \r\n  RadialLinearScale, \r\n  LinearScale,\r\n  CategoryScale,\r\n  BarElement,\r\n  PointElement, \r\n  LineElement, \r\n  ArcElement,\r\n  Filler, \r\n  Tooltip, \r\n  Legend \r\n} from 'chart.js';\r\nimport { Radar } from 'react-chartjs-2';\r\nimport { \r\n  generateSummaryReport,\r\n  calculateScoresByType,\r\n  getRecommendationsByType\r\n} from '../services/assessmentScoringService';\r\n// Import with type assertion for student 9-10 questions\r\nimport student910QuestionsRaw from '../data/student-9-10-questions.json';\r\nimport { Question as AssessmentQuestion, AssessmentScoringResult } from '../types/assessment';\r\nimport { AssessmentData } from '../types/assessment';\r\nimport student1112Questions from '../data/student-11-12-questions.json';\r\nimport professionalQuestions from '../data/professional-questions.json';\r\nimport RiskNavigatorGauge from '../components/RiskNavigatorGauge';\r\nimport StrengthsCard from '../components/StrengthsCard';\r\nimport DevelopmentCard from '../components/DevelopmentCard';\r\nimport TieredPlans from '../components/TieredPlans';\r\nimport ProfileResultsCard from '../components/ProfileResultsCard';\r\n\r\n// Register Chart.js components\r\nChartJS.register(\r\n  RadialLinearScale, \r\n  CategoryScale,\r\n  LinearScale,\r\n  BarElement,\r\n  PointElement, \r\n  LineElement, \r\n  ArcElement,\r\n  Filler, \r\n  Tooltip, \r\n  Legend\r\n);\r\n\r\n\r\n// Constants\r\nconst API_URL = process.env.NODE_ENV === 'production' \r\n  ? 'https://api.wingrox.com/api' \r\n  : 'http://localhost:3001/api';\r\n\r\nconst ASSESSMENT_TYPES = {\r\n  STUDENT_9_10: 'student-9-10',\r\n  STUDENT_11_12: 'student-11-12',\r\n  PROFESSIONAL: 'professional'\r\n};\r\n\r\n\r\n\r\n// Define question types for TypeScript\r\ninterface Option {\r\n  option?: string;\r\n  text: string;\r\n  score?: number;\r\n}\r\n\r\ninterface Question {\r\n  id: number;\r\n  category: string;\r\n  question: string;\r\n  options: Option[];\r\n  dimensionId: string;\r\n  scoringLogic?: string;\r\n}\r\n// ...existing code...\r\nconst student910Questions = (student910QuestionsRaw as AssessmentData).questions;\r\n\r\ninterface UserData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  grade?: string;\r\n  schoolName?: string;\r\n  jobTitle?: string;\r\n  company?: string;\r\n  yearsExperience?: string;\r\n  linkedinUrl?: string;\r\n}\r\n\r\n\r\n\r\nconst CareerAssessment: React.FC = () => {\r\n  const location = useLocation();\r\n  const navigate = useNavigate();\r\n  \r\n  // State variables\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [assessmentType, setAssessmentType] = useState<string>('');\r\n  const [isOrgAssessment, setIsOrgAssessment] = useState(false);\r\n  const [questions, setQuestions] = useState<Question[]>([]);\r\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\r\n  const [answers, setAnswers] = useState<Record<number, string>>({});\r\n  const [userData, setUserData] = useState<UserData>({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    grade: '',\r\n    schoolName: '',\r\n    jobTitle: '',\r\n    company: '',\r\n    yearsExperience: '',\r\n    linkedinUrl: ''\r\n  });\r\n  const [showIntro, setShowIntro] = useState(true);\r\n  const [showAssessment, setShowAssessment] = useState(false);\r\n  const [showResults, setShowResults] = useState(false);\r\n  const [assessmentId, setAssessmentId] = useState<string>('');\r\n  const [submitError, setSubmitError] = useState<string>('');\r\n  const [overallScore, setOverallScore] = useState(0);\r\n  const [categoryScores, setCategoryScores] = useState<Record<string, number>>({});\r\n  const [dimensionScores, setDimensionScores] = useState<any>({});\r\n  const [primaryProfile, setPrimaryProfile] = useState<any>(null);\r\n  const [recommendations, setRecommendations] = useState<any[]>([]);\r\n  \r\n  // Handle user data input changes\r\n  const handleUserDataChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {\r\n    const { name, value } = e.target;\r\n    setUserData(prev => ({ ...prev, [name]: value }));\r\n  };\r\n\r\n  // Handle answer selection for assessment questions\r\n  const handleAnswerSelect = (questionId: number, optionLetter: string) => {\r\n    setAnswers(prev => ({ ...prev, [questionId]: optionLetter }));\r\n  };\r\n\r\n  // Handle starting the assessment (move from intro to assessment)\r\n  const handleStartAssessment = async () => {\r\n    try {\r\n      const mockAssessmentId = `mock-${Date.now()}-${Math.round(Math.random() * 1000)}`;\r\n      setAssessmentId(mockAssessmentId);\r\n      toast.success('Assessment started successfully!');\r\n      setShowIntro(false);\r\n      setShowAssessment(true);\r\n    } catch (error) {\r\n      console.error('Error starting assessment:', error);\r\n      toast.error('Network error. Please check your connection and try again.');\r\n      const mockAssessmentId = `mock-${Date.now()}-${Math.round(Math.random() * 1000)}`;\r\n      setAssessmentId(mockAssessmentId);\r\n      setShowIntro(false);\r\n      setShowAssessment(true);\r\n    }\r\n  };\r\n\r\n  // Clean up chart instances when component unmounts or when showResults changes\r\n  useEffect(() => {\r\n    return () => {\r\n      if (showResults) {\r\n        // Destroy chart instances when component unmounts or when hiding results\r\n        ChartJS.getChart('radar-chart')?.destroy();\r\n      }\r\n    };\r\n  }, [showResults]);\r\n\r\n  useEffect(() => {\r\n    // Determine the assessment type from the URL or localStorage\r\n    const category = localStorage.getItem('category') || '';\r\n    const orgAssessment = localStorage.getItem('isOrgAssessment') === 'true' || location.pathname.includes('organization');\r\n    let assessType = '';\r\n\r\n    if (location.pathname.includes('student-9-10')) {\r\n      assessType = ASSESSMENT_TYPES.STUDENT_9_10;\r\n    } else if (location.pathname.includes('student-11-12')) {\r\n      assessType = ASSESSMENT_TYPES.STUDENT_11_12;\r\n    } else if (location.pathname.includes('professional')) {\r\n      assessType = ASSESSMENT_TYPES.PROFESSIONAL;\r\n    } else if (category.includes('individual-grade-9-10') || category.includes('organization-grade-9-10')) {\r\n      assessType = ASSESSMENT_TYPES.STUDENT_9_10;\r\n    } else if (category.includes('individual-grade-11-12') || category.includes('organization-grade-11-12')) {\r\n      assessType = ASSESSMENT_TYPES.STUDENT_11_12;\r\n    } else if (category.includes('individual-professional') || category.includes('organization-professional')) {\r\n      assessType = ASSESSMENT_TYPES.PROFESSIONAL;\r\n    } else {\r\n      // Default to professional assessment\r\n      assessType = ASSESSMENT_TYPES.PROFESSIONAL;\r\n    }\r\n\r\n    setIsOrgAssessment(orgAssessment);\r\n    setAssessmentType(assessType);\r\n\r\n    // Load appropriate questions based on assessment type\r\n    let questionsData: Question[] = [];\r\n    if (assessType === ASSESSMENT_TYPES.STUDENT_9_10) {\r\n      questionsData = student910Questions as Question[];\r\n    } else if (assessType === ASSESSMENT_TYPES.STUDENT_11_12) {\r\n      questionsData = student1112Questions as Question[];\r\n    } else if (assessType === ASSESSMENT_TYPES.PROFESSIONAL) {\r\n      questionsData = professionalQuestions as Question[];\r\n    }\r\n    setQuestions(questionsData);\r\n    setIsLoading(false);\r\n  }, [location.pathname]);\r\n\r\n  // Handle moving to the next question\r\n  const handleNextQuestion = () => {\r\n    if (currentQuestionIndex < questions.length - 1) {\r\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\r\n      window.scrollTo(0, 0);\r\n    } else {\r\n      // End of assessment\r\n      showAssessmentResults();\r\n    }\r\n  };\r\n\r\n  // Handle moving to the previous question\r\n  const handlePrevQuestion = () => {\r\n    if (currentQuestionIndex > 0) {\r\n      setCurrentQuestionIndex(currentQuestionIndex - 1);\r\n      window.scrollTo(0, 0);\r\n    }\r\n  };\r\n  // Submit the completed assessment to the database\r\n  const submitCompletedAssessment = async (assessmentId: string, responseData: any) => {\r\n    try {\r\n      // For mock IDs, just simulate a successful save since we know the backend isn't fully implemented\r\n      if (assessmentId.startsWith('mock-')) {\r\n        console.log('Mock ID detected, simulating successful assessment save');\r\n        // Save to local storage as a backup\r\n        try {\r\n          localStorage.setItem(`assessment-${assessmentId}`, JSON.stringify({\r\n            responseData,\r\n            timestamp: new Date().toISOString(),\r\n            userData: {\r\n              firstName: userData.firstName,\r\n              lastName: userData.lastName,\r\n              email: userData.email\r\n            },\r\n            isOrgAssessment\r\n          }));\r\n          console.log('Assessment data saved to local storage as fallback');\r\n        } catch (localStorageError) {\r\n          console.error('Could not save to local storage:', localStorageError);\r\n        }\r\n        return true;\r\n      }\r\n\r\n      // Add user profile data\r\n      const enhancedResponseData = {\r\n        ...responseData,\r\n        userData: {\r\n          firstName: userData.firstName,\r\n          lastName: userData.lastName,\r\n          email: userData.email,\r\n          linkedinUrl: userData.linkedinUrl,\r\n          ...(assessmentType.includes('student') ? {\r\n            grade: userData.grade,\r\n            schoolName: userData.schoolName\r\n          } : {\r\n            jobTitle: userData.jobTitle,\r\n            company: userData.company,\r\n            yearsExperience: userData.yearsExperience\r\n          })\r\n        },\r\n        isOrgAssessment\r\n      };\r\n      \r\n      // Determine the correct endpoint based on assessment type\r\n      const assessmentEndpoint = isOrgAssessment ? 'organization' : 'individual';\r\n      \r\n      // Add timeout to axios request to prevent long hanging requests\r\n      const response = await axios.put(\r\n        `${API_URL}/assessment/${assessmentEndpoint}/${assessmentId}`, \r\n        { responseData: enhancedResponseData },\r\n        { timeout: 8000 } // 8 second timeout\r\n      );\r\n      \r\n      if (response.data && response.data.success) {\r\n        console.log('Assessment completed and saved successfully:', response.data);\r\n        return true;\r\n      } else {\r\n        console.error('Failed to save completed assessment:', response.data);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error saving completed assessment:', error);\r\n      // Show error notification\r\n      toast.error('Error saving assessment: Results saved locally but not to server.');\r\n      \r\n      // Save to local storage as a fallback\r\n      try {\r\n        localStorage.setItem(`assessment-${assessmentId}`, JSON.stringify({\r\n          responseData,\r\n          timestamp: new Date().toISOString(),\r\n          userData: {\r\n            firstName: userData.firstName,\r\n            lastName: userData.lastName,\r\n            email: userData.email\r\n          }\r\n        }));\r\n        console.log('Assessment data saved to local storage as fallback');\r\n      } catch (localStorageError) {\r\n        console.error('Could not save to local storage:', localStorageError);\r\n      }\r\n      \r\n      return false;\r\n    }\r\n  };\r\n  // Calculate and display results\r\n  const showAssessmentResults = async () => {\r\n    try {\r\n      // setIsSubmitting(true); // removed unused state\r\n      setSubmitError('');\r\n      \r\n  // Calculate the scores using normalized (0-100) scale\r\n  const categoryScores = calculateCategoryScores();\r\n  const overallScore = calculateOverallScore(categoryScores); // This is now 0-100\r\n\r\n  setCategoryScores(categoryScores);\r\n  setOverallScore(overallScore);\r\n      \r\n      // 2. Enhanced scoring using assessment scoring service\r\n      let advancedScoring: AssessmentScoringResult | null = null;\r\n      let scoringRecommendations = [];\r\n      let scoringSummary = null;\r\n      \r\n      try {\r\n        // Attempt to use enhanced scoring for any assessment type\r\n        console.log('Attempting enhanced scoring for assessment type:', assessmentType);\r\n        advancedScoring = calculateScoresByType(assessmentType, answers) as AssessmentScoringResult;\r\n        \r\n        if (!advancedScoring || advancedScoring.error) {\r\n          console.log('Enhanced scoring not available, falling back to basic scoring:', \r\n            advancedScoring?.error || 'No scoring implementation');\r\n        } else {\r\n          // Enhanced scoring succeeded\r\n          scoringRecommendations = getRecommendationsByType(assessmentType, advancedScoring);\r\n          scoringSummary = generateSummaryReport(advancedScoring);\r\n          \r\n          // Set state with the advanced scoring results\r\n          setDimensionScores(advancedScoring.dimensionScores || {});\r\n          setPrimaryProfile(advancedScoring.primaryProfile || null);\r\n          setRecommendations(scoringRecommendations || []);\r\n           // setSummaryReport(scoringSummary || null); // removed unused state\r\n          \r\n          console.log('Enhanced scoring results:', advancedScoring);\r\n          console.log('Recommendations:', scoringRecommendations);\r\n          console.log('Summary report:', scoringSummary);\r\n        }\r\n      } catch (scoringError) {\r\n        console.error('Error applying advanced scoring:', scoringError);\r\n        // Continue with basic scoring if advanced scoring fails\r\n      }\r\n      \r\n      // Get stored question scores if available\r\n      let questionScores = {};\r\n      try {\r\n        questionScores = JSON.parse(localStorage.getItem('assessment-question-scores') || '{}');\r\n      } catch (e) {\r\n        console.error('Could not retrieve stored question scores:', e);\r\n      }\r\n\r\n      // Prepare the response data - unified for all assessment types\r\n      const responseData = {\r\n        answers: answers,\r\n        questionScores: questionScores, // Include individual question scores\r\n        categories: categoryScores,\r\n        overallScore: overallScore,\r\n        completedAt: new Date().toISOString(),\r\n        assessmentType: assessmentType,\r\n        // Include advanced scoring results if available\r\n        ...(advancedScoring && !(advancedScoring as any).error ? {\r\n          dimensionScores: (advancedScoring as any).dimensionScores,\r\n          primaryProfile: (advancedScoring as any).primaryProfile,\r\n          recommendations: scoringRecommendations,\r\n          summaryReport: scoringSummary\r\n        } : {})\r\n      };\r\n      \r\n      // Only submit to server if we have a valid assessment ID\r\n      if (assessmentId) {\r\n        console.log('Submitting assessment answers:', responseData);\r\n        \r\n        // Try to save assessment data\r\n        try {\r\n          const result = await submitCompletedAssessment(assessmentId, responseData);\r\n          \r\n          if (result) {\r\n            // setIsAssessmentSaved(true); // removed unused state\r\n            toast.success('Your assessment has been successfully saved!');\r\n          } else {\r\n            // Even if the API call fails, we'll show results from local calculations\r\n            toast.info('Your assessment results are available below, but could not be saved to our server.');\r\n            setSubmitError('Your results are available below. You may want to save or screenshot this page for your records.');\r\n          }\r\n        } catch (submissionError) {\r\n          console.error('Error in submission process:', submissionError);\r\n          toast.info('Your assessment results are available below, but could not be saved to our server.');\r\n          setSubmitError('Your results are available below. You may want to save or screenshot this page for your records.');\r\n        }\r\n      } else {\r\n        console.log('No assessment ID available, answers will not be stored in database');\r\n        setSubmitError('Your results are available below. You may want to save or screenshot this page for your records.');\r\n      }\r\n      \r\n      // setIsSubmitting(false); // removed unused state\r\n    } catch (error) {\r\n      console.error('Error processing assessment answers:', error);\r\n      // setIsSubmitting(false); // removed unused state\r\n      setSubmitError('Your results are available below. You may want to save or screenshot this page for your records.');\r\n    } finally {\r\n      // Show results section regardless of server submission success\r\n      setShowAssessment(false);\r\n      setShowResults(true);\r\n      window.scrollTo(0, 0);\r\n    }\r\n  };\r\n\r\n  // Calculate category scores\r\n  const calculateCategoryScores = useCallback(() => {\r\n    // Group by category, use max score per question, never exceed 100%\r\n    const categoryScoresRaw: Record<string, { raw: number; max: number }> = {};\r\n    const questionScores: Record<number, number> = {};\r\n\r\n    questions.forEach(question => {\r\n      const answer = answers[question.id];\r\n      if (!answer) return;\r\n      const cat = question.category;\r\n      if (!categoryScoresRaw[cat]) categoryScoresRaw[cat] = { raw: 0, max: 0 };\r\n      // Find selected option\r\n      const selectedOption = question.options.find(opt => opt.option === answer);\r\n      const score = selectedOption && typeof selectedOption.score === 'number' ? selectedOption.score : 0;\r\n      questionScores[question.id] = score;\r\n      categoryScoresRaw[cat].raw += score;\r\n      // Max for this question is the highest score among its options\r\n      const maxForQ = Math.max(...question.options.map(opt => typeof opt.score === 'number' ? opt.score : 0));\r\n      categoryScoresRaw[cat].max += maxForQ;\r\n    });\r\n\r\n    // Store question scores in localStorage for reference\r\n    try {\r\n      localStorage.setItem('assessment-question-scores', JSON.stringify(questionScores));\r\n    } catch (err) {\r\n      console.error('Could not store question scores:', err);\r\n    }\r\n\r\n    // Calculate category percentages (0-100, never above 100)\r\n    const categoryScores: Record<string, number> = {};\r\n    Object.keys(categoryScoresRaw).forEach(cat => {\r\n      const { raw, max } = categoryScoresRaw[cat];\r\n      categoryScores[cat] = max > 0 ? Math.round((raw / max) * 100) : 0;\r\n    });\r\n    return categoryScores;\r\n  }, [questions, answers]);\r\n\r\n  // Calculate overall score\r\n  const calculateOverallScore = useCallback((categoryScores: Record<string, number>) => {\r\n    const categoryValues = Object.values(categoryScores);\r\n    if (categoryValues.length === 0) return 0;\r\n    \r\n    const sum = categoryValues.reduce((total, score) => total + score, 0);\r\n    return Math.round(sum / categoryValues.length);\r\n  }, []);\r\n\r\n  // Progress percentage for the assessment\r\n  const progressRaw = (currentQuestionIndex / (questions.length - 1)) * 100;\r\n  const progressPercentage = Number.isFinite(progressRaw) ? Number(progressRaw.toFixed(2)) : 0;\r\n\r\n  // Render the introduction section\r\n  const renderIntroSection = () => {\r\n    return (\r\n      <div className=\"bg-white rounded-2xl shadow-sm p-8\">\r\n        <h2 className=\"text-2xl font-bold mb-6\">\r\n          {isOrgAssessment ? (\r\n            assessmentType.includes('9-10')\r\n              ? '9-10 Grade Student Organization Assessment'\r\n              : assessmentType.includes('11-12')\r\n              ? '11-12 Grade Student Organization Assessment'\r\n              : 'Professional Organization Assessment'\r\n          ) : (\r\n            assessmentType.includes('9-10')\r\n              ? '9-10 Grade Student Assessment Information'\r\n              : assessmentType.includes('11-12')\r\n              ? '11-12 Grade Student Assessment Information'\r\n              : 'Professional Career Assessment Information'\r\n          )}\r\n        </h2>\r\n        \r\n        {submitError && (\r\n          <div className=\"bg-red-50 border-l-4 border-red-500 p-4 mb-6\">\r\n            <p className=\"text-red-700\">{submitError}</p>\r\n          </div>\r\n        )}\r\n        \r\n        <div className=\"mb-6\">\r\n          <p className=\"text-gray-700 mb-4\">\r\n            {isOrgAssessment ? (\r\n              assessmentType.includes('student')\r\n                ? 'This assessment will help you understand student college and career readiness across your organization and provide strategic recommendations.'\r\n                : 'This assessment will evaluate career readiness across your organization and provide tailored strategic recommendations for organizational growth.'\r\n            ) : (\r\n              assessmentType.includes('student')\r\n                ? 'This assessment will help you understand your college and career readiness and provide personalized recommendations.'\r\n                : 'This assessment will evaluate your career readiness across key dimensions and provide tailored recommendations for your professional growth.'\r\n            )}\r\n          </p>\r\n          \r\n          <div className=\"bg-blue-50 border-l-4 border-blue-500 p-4 mb-4\">\r\n            <h3 className=\"text-lg font-semibold text-blue-800 mb-2\">What to expect</h3>\r\n            <ul className=\"list-disc list-inside text-blue-700 space-y-1\">\r\n              <li>The assessment contains {questions.length} questions and takes about {isOrgAssessment ? '15-20' : '10-15'} minutes to complete.</li>\r\n              <li>Your responses are confidential and will be used to generate {isOrgAssessment ? 'organizational insights' : 'personalized insights'}.</li>\r\n              <li>You'll receive immediate results with actionable recommendations{isOrgAssessment ? ' for your organization' : ''}.</li>\r\n              {isOrgAssessment && <li>You can use these results to develop targeted improvement strategies across your organization.</li>}\r\n            </ul>\r\n          </div>\r\n        </div>\r\n        \r\n        <form className=\"space-y-6\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div>\r\n              <label htmlFor=\"firstName\" className=\"block text-sm font-medium text-gray-700 mb-1\">First Name *</label>\r\n              <input \r\n                type=\"text\"\r\n                id=\"firstName\"\r\n                name=\"firstName\"\r\n                value={userData.firstName}\r\n                onChange={handleUserDataChange}\r\n                required\r\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n              />\r\n            </div>\r\n            \r\n            <div>\r\n              <label htmlFor=\"lastName\" className=\"block text-sm font-medium text-gray-700 mb-1\">Last Name *</label>\r\n              <input \r\n                type=\"text\"\r\n                id=\"lastName\"\r\n                name=\"lastName\"\r\n                value={userData.lastName}\r\n                onChange={handleUserDataChange}\r\n                required\r\n                className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n              />\r\n            </div>\r\n          </div>\r\n          \r\n          <div>\r\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">Email Address *</label>\r\n            <input \r\n              type=\"email\"\r\n              id=\"email\"\r\n              name=\"email\"\r\n              value={userData.email}\r\n              onChange={handleUserDataChange}\r\n              required\r\n              className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n            />\r\n          </div>\r\n          \r\n          {isOrgAssessment ? (\r\n            <>\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                <div>\r\n                  <label htmlFor=\"company\" className=\"block text-sm font-medium text-gray-700 mb-1\">Organization Name *</label>\r\n                  <input \r\n                    type=\"text\"\r\n                    id=\"company\"\r\n                    name=\"company\"\r\n                    value={userData.company}\r\n                    onChange={handleUserDataChange}\r\n                    required\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"jobTitle\" className=\"block text-sm font-medium text-gray-700 mb-1\">Your Role/Position *</label>\r\n                  <input \r\n                    type=\"text\"\r\n                    id=\"jobTitle\"\r\n                    name=\"jobTitle\"\r\n                    value={userData.jobTitle}\r\n                    onChange={handleUserDataChange}\r\n                    required\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n              </div>\r\n              \r\n              {assessmentType.includes('student') ? (\r\n                <div>\r\n                  <label htmlFor=\"schoolName\" className=\"block text-sm font-medium text-gray-700 mb-1\">School/Institution Name</label>\r\n                  <input \r\n                    type=\"text\"\r\n                    id=\"schoolName\"\r\n                    name=\"schoolName\"\r\n                    value={userData.schoolName}\r\n                    onChange={handleUserDataChange}\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                  />\r\n                </div>\r\n              ) : (\r\n                <div>\r\n                  <label htmlFor=\"yearsExperience\" className=\"block text-sm font-medium text-gray-700 mb-1\">Organization Size</label>\r\n                  <select\r\n                    id=\"yearsExperience\"\r\n                    name=\"yearsExperience\"\r\n                    value={userData.yearsExperience}\r\n                    onChange={(e) => setUserData({...userData, yearsExperience: e.target.value})}\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"\">Select Size</option>\r\n                    <option value=\"1-10\">1-10 employees</option>\r\n                    <option value=\"11-50\">11-50 employees</option>\r\n                    <option value=\"51-200\">51-200 employees</option>\r\n                    <option value=\"201-500\">201-500 employees</option>\r\n                    <option value=\"501+\">501+ employees</option>\r\n                  </select>\r\n                </div>\r\n              )}\r\n            </>\r\n          ) : (\r\n            assessmentType.includes('student') ? (\r\n              <>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <label htmlFor=\"grade\" className=\"block text-sm font-medium text-gray-700 mb-1\">Current Grade</label>\r\n                    <select\r\n                      id=\"grade\"\r\n                      name=\"grade\"\r\n                      value={userData.grade}\r\n                      onChange={(e) => setUserData({...userData, grade: e.target.value})}\r\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                    >\r\n                      <option value=\"\">Select Grade</option>\r\n                      {assessmentType.includes('9-10') ? (\r\n                        <>\r\n                          <option value=\"9\">Grade 9</option>\r\n                          <option value=\"10\">Grade 10</option>\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <option value=\"11\">Grade 11</option>\r\n                          <option value=\"12\">Grade 12</option>\r\n                        </>\r\n                      )}\r\n                    </select>\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label htmlFor=\"schoolName\" className=\"block text-sm font-medium text-gray-700 mb-1\">School Name</label>\r\n                    <input \r\n                      type=\"text\"\r\n                      id=\"schoolName\"\r\n                      name=\"schoolName\"\r\n                      value={userData.schoolName}\r\n                      onChange={handleUserDataChange}\r\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div>\r\n                    <label htmlFor=\"jobTitle\" className=\"block text-sm font-medium text-gray-700 mb-1\">Current Job Title</label>\r\n                    <input \r\n                      type=\"text\"\r\n                      id=\"jobTitle\"\r\n                      name=\"jobTitle\"\r\n                      value={userData.jobTitle}\r\n                      onChange={handleUserDataChange}\r\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                    />\r\n                  </div>\r\n                  \r\n                  <div>\r\n                    <label htmlFor=\"company\" className=\"block text-sm font-medium text-gray-700 mb-1\">Company/Organization</label>\r\n                    <input \r\n                      type=\"text\"\r\n                      id=\"company\"\r\n                      name=\"company\"\r\n                      value={userData.company}\r\n                      onChange={handleUserDataChange}\r\n                      className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n                \r\n                <div>\r\n                  <label htmlFor=\"yearsExperience\" className=\"block text-sm font-medium text-gray-700 mb-1\">Years of Experience</label>\r\n                  <select\r\n                    id=\"yearsExperience\"\r\n                    name=\"yearsExperience\"\r\n                    value={userData.yearsExperience}\r\n                    onChange={(e) => setUserData({...userData, yearsExperience: e.target.value})}\r\n                    className=\"w-full px-4 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\"\r\n                  >\r\n                    <option value=\"\">Select Experience</option>\r\n                    <option value=\"0-1\">Less than 1 year</option>\r\n                    <option value=\"1-3\">1-3 years</option>\r\n                    <option value=\"3-5\">3-5 years</option>\r\n                    <option value=\"5-10\">5-10 years</option>\r\n                    <option value=\"10+\">10+ years</option>\r\n                  </select>\r\n                </div>\r\n              </>\r\n            )\r\n          )}\r\n          \r\n          <div className=\"border-t border-gray-200 pt-6\">\r\n            <button\r\n              type=\"button\"\r\n              onClick={handleStartAssessment}\r\n              className=\"w-full md:w-auto px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors\"\r\n            >\r\n              {isOrgAssessment ? 'Start Organization Assessment' : 'Start Assessment'}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Render the assessment questions section\r\n  const renderAssessmentSection = () => {\r\n    if (questions.length === 0 || !questions[currentQuestionIndex]) {\r\n      return (\r\n        <div className=\"bg-white rounded-2xl shadow-sm p-8 text-center\">\r\n          <p className=\"text-gray-700 mb-4\">No questions available. Please try again later.</p>\r\n          <button\r\n            onClick={() => navigate('/')}\r\n            className=\"px-6 py-3 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors\"\r\n          >\r\n            Go Home\r\n          </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const currentQuestion = questions[currentQuestionIndex];\r\n\r\n    return (\r\n      <div className=\"bg-white rounded-2xl shadow-sm p-8\">\r\n        {/* Progress bar */}\r\n        <div className=\"mb-8\">\r\n          <div className=\"flex justify-between text-sm text-gray-600 mb-1\">\r\n            <span>Question {currentQuestionIndex + 1} of {questions.length}</span>\r\n            <span>{progressPercentage}% Complete</span>\r\n          </div>\r\n          <div className=\"w-full h-2 bg-gray-200 rounded-full overflow-hidden\">\r\n            <div \r\n              className=\"h-full bg-blue-600 rounded-full\" \r\n              style={{ width: `${progressPercentage}%` }}\r\n            ></div>\r\n          </div>\r\n        </div>\r\n        \r\n        {/* Question category */}\r\n        <div className=\"inline-block px-3 py-1 bg-blue-50 text-blue-700 rounded-full text-sm font-medium mb-4\">\r\n          {currentQuestion.category}\r\n        </div>\r\n        \r\n        {/* Question text */}\r\n        <h3 className=\"text-xl font-semibold text-gray-800 mb-6\">\r\n          {currentQuestion.question}\r\n        </h3>\r\n          {/* Options - 2 column layout */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-8\">\r\n          {currentQuestion.options.map((option, index) => {\r\n            const optionLetter = String.fromCharCode(97 + index); // a, b, c, etc.\r\n            const isSelected = answers[currentQuestion.id] === optionLetter;\r\n            \r\n            return (\r\n              <div \r\n                key={index}\r\n                onClick={() => handleAnswerSelect(currentQuestion.id, optionLetter)}\r\n                className={`p-4 border ${isSelected ? 'border-blue-500 bg-blue-50' : 'border-gray-200 hover:border-gray-300'} rounded-lg cursor-pointer transition-all h-full`}\r\n              >\r\n                <div className=\"flex items-start h-full\">\r\n                  <div className={`flex-shrink-0 w-6 h-6 rounded-full ${isSelected ? 'bg-blue-500' : 'bg-gray-200'} flex items-center justify-center mr-3 mt-0.5`}>\r\n                    <span className={`text-sm font-semibold ${isSelected ? 'text-white' : 'text-gray-600'}`}>\r\n                      {optionLetter.toUpperCase()}\r\n                    </span>\r\n                  </div>\r\n                  <span className=\"text-gray-800\">{option.text}</span>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n        \r\n        {/* Navigation buttons */}\r\n        <div className=\"flex justify-between pt-6 border-t border-gray-200\">\r\n          <button\r\n            onClick={handlePrevQuestion}\r\n            disabled={currentQuestionIndex === 0}\r\n            className={`px-6 py-3 ${currentQuestionIndex === 0 ? 'bg-gray-300 cursor-not-allowed' : 'bg-gray-100 hover:bg-gray-200'} text-gray-700 font-medium rounded-md transition-colors`}\r\n          >\r\n            Previous\r\n          </button>\r\n          <button\r\n            onClick={handleNextQuestion}\r\n            disabled={!answers[currentQuestion.id]}\r\n            className={`px-6 py-3 ${!answers[currentQuestion.id] ? 'bg-blue-300 cursor-not-allowed' : 'bg-blue-600 hover:bg-blue-700'} text-white font-medium rounded-md transition-colors`}\r\n          >\r\n            {currentQuestionIndex === questions.length - 1 ? 'Finish' : 'Next'}\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n  // PDF download handler\r\n  const handleDownloadPDF = () => {\r\n    // Dismiss any toasts to avoid overlay in PDF\r\n    toast.dismiss();\r\n    const element = document.getElementById('assessment-results-section');\r\n    if (element) {\r\n      html2pdf().from(element).set({\r\n        margin: [0.75, 0.5, 0.75, 0.5], // top, right, bottom, left (inches)\r\n        filename: 'career-assessment-report.pdf',\r\n        html2canvas: { scale: 2, useCORS: true },\r\n        pagebreak: { mode: ['avoid-all', 'css', 'legacy'] }\r\n      }).save();\r\n    } else {\r\n      toast.error('Could not find results section to export.');\r\n    }\r\n  };\r\n\r\n  // Render the results section\r\n  const renderResultsSection = () => {\r\n    // Build a mapping from category to concise label for radar chart labels\r\n    const categoryLabelMap: Record<string, string> = {};\r\n    questions.forEach(q => {\r\n      if (q.category) {\r\n        // Use only the part before ':' for concise label\r\n        const conciseLabel = q.category.includes(':') ? q.category.split(':')[0].trim() : q.category.trim();\r\n        categoryLabelMap[q.category] = conciseLabel;\r\n      }\r\n    });\r\n\r\n    // Sort scores by value\r\n    const sortedScores = Object.entries(categoryScores)\r\n      .map(([key, score]) => ({ key, score }))\r\n      .sort((a, b) => b.score - a.score);\r\n\r\n    // Top 3 strengths (highest scores)\r\n    const strengths = sortedScores.slice(0, 3);\r\n    // Top 3 opportunities (lowest scores)\r\n    const weaknesses = sortedScores.slice(-3).reverse();\r\n\r\n    // Radar chart: each axis is a concise label, value is the normalized score (0-100)\r\n    const radarData = {\r\n      labels: sortedScores.map(item => {\r\n        // Use concise label from categoryLabelMap, fallback to key\r\n        return categoryLabelMap[item.key] || item.key;\r\n      }),\r\n      datasets: [\r\n        {\r\n          label: 'Your Score',\r\n          data: sortedScores.map(item => item.score),\r\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\r\n          borderColor: 'rgba(54, 162, 235, 1)',\r\n          borderWidth: 2,\r\n          pointBackgroundColor: 'rgba(54, 162, 235, 1)',\r\n          pointRadius: 4,\r\n        }\r\n      ]\r\n    };\r\n    \r\n    return (\r\n      <div id=\"assessment-results-section\">\r\n        <div className=\"flex justify-end mb-4\">\r\n          <button\r\n            onClick={handleDownloadPDF}\r\n            className=\"inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white font-semibold rounded-lg shadow transition\"\r\n          >\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M12 4v16m8-8H4\" />\r\n            </svg>\r\n            Download PDF\r\n          </button>\r\n        </div>\r\n        <h2 className=\"text-2xl font-bold text-gray-900\">\r\n          {isOrgAssessment ? 'Organization Career Health Score' : 'Career Health Score'}\r\n        </h2>\r\n        {isOrgAssessment && (\r\n          <p className=\"text-gray-600 mt-2\">\r\n            This score represents the aggregate career readiness across your organization\r\n          </p>\r\n        )}\r\n        {/* Risk Navigator Gauge - Moved to the top */}\r\n        <div className=\"mb-8\">\r\n          {/* Gauge and Growth Track now use normalized overallScore (0-100) */}\r\n          <RiskNavigatorGauge score={overallScore} maxScore={100} />\r\n          <div className=\"mt-4 text-center\">\r\n            {overallScore >= 71 && (\r\n              <span className=\"text-green-600 font-bold\">You're in the Strength Track zone with a score of <b>{overallScore}</b>. This is a competitive advantage!</span>\r\n            )}\r\n            {overallScore >= 41 && overallScore < 71 && (\r\n              <span className=\"text-yellow-600 font-bold\">You're in the Growth Track zone with a score of <b>{overallScore}</b>. Focus on key areas for improvement.</span>\r\n            )}\r\n            {overallScore < 41 && (\r\n              <span className=\"text-red-600 font-bold\">You're in the High-Risk zone with a score of <b>{overallScore}</b>. Immediate attention is needed in several areas.</span>\r\n            )}\r\n          </div>\r\n        </div>\r\n        {/* Advanced Profile Results - Show when available for any assessment type */}\r\n        {primaryProfile && Object.keys(dimensionScores).length > 0 && (\r\n          <ProfileResultsCard \r\n            profile={primaryProfile}\r\n            dimensionScores={dimensionScores}\r\n            recommendations={recommendations}\r\n          />\r\n        )}\r\n        {/* Career Health Radar - Reduced size with description */}\r\n        <div className=\"bg-white rounded-lg shadow-sm p-5 mb-8\">\r\n          <h3 className=\"text-lg font-bold text-gray-800 mb-3 flex items-center\">\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-5 w-5 mr-2 text-blue-500\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n              <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z\" />\r\n            </svg>\r\n            Career Dimensions Radar\r\n          </h3>\r\n          <div className=\"flex flex-col md:flex-row items-center gap-4\">\r\n            {/* Increased chart width for better label fit */}\r\n            <div className=\"w-full md:w-[520px] mx-auto flex-shrink-0\">\r\n              <Radar \r\n                data={radarData} \r\n                options={{\r\n                  scales: {\r\n                    r: {\r\n                      beginAtZero: true,\r\n                      min: 0,\r\n                      max: 100,\r\n                      ticks: {\r\n                        stepSize: 20,\r\n                        backdropColor: 'transparent',\r\n                        display: true,\r\n                        font: {\r\n                          size: 12\r\n                        }\r\n                      },\r\n                      pointLabels: {\r\n                        font: {\r\n                          size: 14\r\n                        },\r\n                        padding: 10\r\n                      }\r\n                    }\r\n                  },\r\n                  plugins: {\r\n                    legend: {\r\n                      display: false\r\n                    }\r\n                  },\r\n                  maintainAspectRatio: false\r\n                }} \r\n                height={340}\r\n                width={520}\r\n              />\r\n            </div>\r\n            {/* Description panel */}\r\n            <div className=\"md:max-w-sm p-4 bg-blue-50 rounded-lg\">\r\n              <h4 className=\"font-medium text-blue-700 text-sm mb-2\">Understanding Your Score</h4>\r\n              <ul className=\"text-sm space-y-2\">\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"inline-block w-3 h-3 bg-red-400 rounded-full mt-1 mr-2\"></span>\r\n                  <span><strong>0-40:</strong> High-risk areas needing immediate attention</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"inline-block w-3 h-3 bg-yellow-400 rounded-full mt-1 mr-2\"></span>\r\n                  <span><strong>41-70:</strong> Developing areas with improvement needed</span>\r\n                </li>\r\n                <li className=\"flex items-start\">\r\n                  <span className=\"inline-block w-3 h-3 bg-green-400 rounded-full mt-1 mr-2\"></span>\r\n                  <span><strong>71-100:</strong> Strength areas that give you competitive advantage</span>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {/* Strengths and Development Opportunities */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8 mb-10\">\r\n          <div className=\"h-full\">\r\n            <StrengthsCard \r\n              strengths={strengths.map(item => ({\r\n                title: categoryLabelMap[item.key] || item.key,\r\n                description: `${item.score}% - ${item.score >= 80 ? 'Exceptional' : item.score >= 70 ? 'Strong' : 'Solid'} performance in this area gives you a competitive advantage.`,\r\n                icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fill-rule=\"evenodd\" d=\"M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z\" clip-rule=\"evenodd\" /></svg>'\r\n              }))}\r\n            />\r\n          </div>\r\n          <div className=\"h-full\">\r\n            <DevelopmentCard \r\n              opportunities={weaknesses.map(item => ({\r\n                title: categoryLabelMap[item.key] || item.key,\r\n                description: `${item.score}% - This area requires focused attention and strategic improvement to reduce career risk.`,\r\n                icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"h-5 w-5\" viewBox=\"0 0 20 20\" fill=\"currentColor\"><path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z\" clip-rule=\"evenodd\" /></svg>'\r\n              }))}\r\n            />\r\n          </div>\r\n        </div>\r\n        {/* Growth Path Selection */}\r\n        <div className=\"mb-12 bg-white p-8 rounded-lg shadow-sm\">\r\n          <TieredPlans />\r\n        </div>\r\n        {/* Call to action buttons */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6 mb-10\">\r\n          {isOrgAssessment ? (\r\n            <>\r\n              <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Schedule an Organization Consultation</h3>\r\n                <p className=\"text-gray-600 mb-4\">\r\n                  Get expert guidance on implementing organization-wide career development strategies.\r\n                </p>\r\n                <button \r\n                  className=\"w-full py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition\"\r\n                >\r\n                  Request Consultation\r\n                </button>\r\n              </div>\r\n              <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Enterprise Solutions</h3>\r\n                <p className=\"text-gray-600 mb-4\">\r\n                  Access our full suite of organizational development tools and leadership training resources.\r\n                </p>\r\n                <button \r\n                  className=\"w-full py-3 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition\"\r\n                >\r\n                  Explore Enterprise Solutions\r\n                </button>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Schedule a Career Coaching Session</h3>\r\n                <p className=\"text-gray-600 mb-4\">\r\n                  Get personalized guidance from our expert career coaches to accelerate your growth.\r\n                </p>\r\n                  <button \r\n                    className=\"w-full py-3 bg-blue-600 hover:bg-blue-700 text-white font-medium rounded-lg transition\"\r\n                    onClick={() => navigate('/marketplace')}\r\n                  >\r\n                    Book a Coach\r\n                  </button>\r\n              </div>\r\n              <div className=\"bg-white p-6 rounded-lg shadow-sm\">\r\n                <h3 className=\"text-xl font-semibold text-gray-800 mb-3\">Access Premium Resources</h3>\r\n                <p className=\"text-gray-600 mb-4\">\r\n                  Unlock our library of curated career development tools, courses, and materials.\r\n                </p>\r\n                  <button \r\n                    className=\"w-full py-3 bg-purple-600 hover:bg-purple-700 text-white font-medium rounded-lg transition\"\r\n                    onClick={() => navigate('/products')}\r\n                  >\r\n                    Explore Resources\r\n                  </button>\r\n              </div>\r\n            </>\r\n          )}\r\n        </div>\r\n        {/* Disclaimer */}\r\n        <div className=\"bg-gray-50 p-4 rounded-lg text-sm text-gray-500 text-center\">\r\n          {isOrgAssessment ? (\r\n            <>\r\n              This assessment provides organizational insights based on responses and is meant to be a starting point \r\n              for strategic career development initiatives. Results should be considered alongside other organizational \r\n              data and professional feedback when making decisions.\r\n            </>\r\n          ) : (\r\n            <>\r\n              This assessment provides insights based on your responses and is meant to be a starting point \r\n              for your career development journey. Results should be considered alongside other professional \r\n              feedback and personal reflection.\r\n            </>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Main return statement\r\n  return (\r\n    <div className=\"min-h-screen bg-gradient-to-b from-blue-50 to-blue-100\">\r\n      {/* Toast container for notifications */}\r\n      <ToastContainer\r\n        position=\"top-right\"\r\n        autoClose={5000}\r\n        hideProgressBar={false}\r\n        newestOnTop\r\n        closeOnClick\r\n        rtl={false}\r\n        pauseOnFocusLoss\r\n        draggable\r\n        pauseOnHover\r\n      />\r\n      {/* Banner/Header section - Home page style */}\r\n      <section className=\"bg-gradient-to-r from-blue-900 to-indigo-800 rounded-xl p-8 md:p-12 text-white relative overflow-hidden mb-8 shadow-lg\">\r\n        <div className=\"relative z-10 max-w-3xl mx-auto text-center\">\r\n          <h1 className=\"text-5xl font-extrabold text-transparent bg-clip-text bg-gradient-to-r from-blue-200 to-cyan-400 mb-4 tracking-tight\" style={{ fontFamily: 'Inter, sans-serif', letterSpacing: '-0.02em' }}>\r\n            {isOrgAssessment ? (\r\n              assessmentType.includes('9-10')\r\n                ? '9-10 Grade Student Organization Risk Assessment'\r\n                : assessmentType.includes('11-12')\r\n                ? '11-12 Grade Student Organization Risk Assessment'\r\n                : 'Professional Organization Career Risk Assessment'\r\n            ) : (\r\n              assessmentType.includes('9-10')\r\n                ? '9-10 Grade Student Risk Assessment'\r\n                : assessmentType.includes('11-12')\r\n                ? '11-12 Grade Student Risk Assessment'\r\n                : 'Professional Career Risk Assessment'\r\n            )}\r\n          </h1>\r\n          <p className=\"text-xl text-blue-100 mb-6\">\r\n            {isOrgAssessment ? (\r\n              assessmentType.includes('professional')\r\n                ? 'Evaluate career readiness across your organization and get strategic recommendations.'\r\n                : 'Evaluate college and career readiness across your student body and get actionable insights.'\r\n            ) : (\r\n              assessmentType.includes('professional')\r\n                ? 'Discover your career readiness and get personalized recommendations for your professional growth.'\r\n                : 'Discover your college and career readiness and get personalized recommendations for your future.'\r\n            )}\r\n          </p>\r\n        </div>\r\n        {/* Visual element resembling an AI orb */}\r\n        <div className=\"absolute -top-24 -right-24 w-64 h-64 rounded-full bg-gradient-to-br from-blue-500/30 to-cyan-500/30 blur-3xl\"></div>\r\n        <div className=\"absolute -bottom-16 -left-16 w-48 h-48 rounded-full bg-gradient-to-tr from-indigo-500/20 to-purple-500/20 blur-3xl\"></div>\r\n      </section>\r\n\r\n      {/* Main content section */}\r\n      {isLoading ? (\r\n        <div className=\"flex justify-center items-center h-64\">\r\n          <div className=\"animate-spin rounded-full h-16 w-16 border-t-2 border-b-2 border-blue-500\"></div>\r\n        </div>\r\n      ) : (\r\n        <>\r\n          {showIntro && renderIntroSection()}\r\n          {showAssessment && renderAssessmentSection()}\r\n          {showResults && renderResultsSection()}\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CareerAssessment;\r\n"],"names":["calculateAssessmentScores","responses","Object","keys","length","error","questions","assessmentMetadata","assessmentData","scoringDimensions","resultProfiles","categoryScores","categoryMeta","forEach","question","id","category","options","scoringLogic","responseOption","selectedOption","find","opt","option","rawScore","maxPossibleScore","meta","dim","toLowerCase","includes","name","score","maxScoreForQuestion","Math","max","map","dimensionScores","percentageScore","round","level","thresholds","high","medium","dimensionName","dimensionDescription","description","matchingProfiles","filter","profile","entries","conditions","every","_ref","_dimensionScores$dime","dimensionId","requiredLevel","userLevel","split","primaryProfile","allMatchingProfiles","responseCount","totalQuestions","completionPercentage","console","details","message","getRecommendations","scores","recommendations","clarity","push","type","title","priority","confidence","exploration","resilience","generateSummaryReport","strengths","values","dimension","area","improvements","summary","profileName","improvementAreas","slice","allRecommendations","calculateScoresByType","assessmentType","dimensions","require","Array","from","Set","q","questionScores","raw","answer","maxForQ","categoryValues","overallScore","reduce","a","b","getRecommendationsByType","topRecommendations","_jsxs","className","children","_jsx","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","_ref2","key","value","style","width","recommendation","fillRule","clipRule","ChartJS","register","RadialLinearScale","CategoryScale","LinearScale","BarElement","PointElement","LineElement","ArcElement","Filler","Tooltip","Legend","ASSESSMENT_TYPES","student910Questions","student910QuestionsRaw","CareerAssessment","location","useLocation","navigate","useNavigate","isLoading","setIsLoading","useState","setAssessmentType","isOrgAssessment","setIsOrgAssessment","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","answers","setAnswers","userData","setUserData","firstName","lastName","email","grade","schoolName","jobTitle","company","yearsExperience","linkedinUrl","showIntro","setShowIntro","showAssessment","setShowAssessment","showResults","setShowResults","assessmentId","setAssessmentId","submitError","setSubmitError","setOverallScore","setCategoryScores","setDimensionScores","setPrimaryProfile","setRecommendations","handleUserDataChange","e","target","prev","handleStartAssessment","async","mockAssessmentId","Date","now","random","toast","success","useEffect","_ChartJS$getChart","getChart","destroy","localStorage","getItem","orgAssessment","pathname","assessType","questionsData","student1112Questions","professionalQuestions","handleNextQuestion","window","scrollTo","showAssessmentResults","handlePrevQuestion","calculateCategoryScores","calculateOverallScore","advancedScoring","scoringRecommendations","scoringSummary","_advancedScoring","log","scoringError","JSON","parse","responseData","categories","completedAt","toISOString","summaryReport","result","startsWith","setItem","stringify","timestamp","localStorageError","enhancedResponseData","assessmentEndpoint","response","axios","put","timeout","data","submitCompletedAssessment","info","submissionError","useCallback","categoryScoresRaw","cat","err","sum","total","progressRaw","progressPercentage","Number","isFinite","toFixed","handleDownloadPDF","dismiss","element","document","getElementById","html2pdf","set","margin","filename","html2canvas","scale","useCORS","pagebreak","mode","save","ToastContainer","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","fontFamily","letterSpacing","_Fragment","htmlFor","onChange","required","onClick","renderAssessmentSection","currentQuestion","index","optionLetter","String","fromCharCode","isSelected","handleAnswerSelect","questionId","toUpperCase","text","disabled","renderResultsSection","categoryLabelMap","conciseLabel","trim","sortedScores","sort","weaknesses","reverse","radarData","labels","item","datasets","label","backgroundColor","borderColor","borderWidth","pointBackgroundColor","pointRadius","RiskNavigatorGauge","maxScore","ProfileResultsCard","Radar","scales","r","beginAtZero","min","ticks","stepSize","backdropColor","display","font","size","pointLabels","padding","plugins","legend","maintainAspectRatio","height","StrengthsCard","icon","DevelopmentCard","opportunities","TieredPlans"],"sourceRoot":""}