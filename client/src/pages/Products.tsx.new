import React, { useState, useEffect, useMemo, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { useAuth } from '../context/AuthContext';
import AdminControl from '../components/AdminControl';
import { products } from '../services/api';
import { Product as ProductType, ApiResponse } from '../types/product';

// Helper function to format a product for editing
const formatProductForEdit = (product: any) => {
  return {
    name: product.name || '',
    description: product.description || '',
    price: product.price || 0,
    oldPrice: product.oldPrice || 0,
    badge: product.badge || '',
    category: product.category || 'digital',
    productType: product.productType || 'individual',
    images: product.images?.length ? product.images : [''],
    features: product.features?.length ? product.features : [''],
    enterpriseFeatures: product.enterpriseFeatures?.length ? product.enterpriseFeatures : [''],
    enterpriseSubcategory: product.enterpriseSubcategory || ''
  };
};

// ProductsWrapper component to handle loading states with consistent layout
const ProductsWrapper = ({ children, loading }: { children: React.ReactNode, loading: boolean }) => {
  // Define minimum height for the products section to prevent layout shifts
  const minHeight = "1200px";
  
  if (loading) {
    return (
      <div style={{ minHeight }} className="w-full animate-pulse">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
          {[1, 2, 3, 4, 5, 6].map(i => (
            <div key={i} className="bg-white rounded-xl shadow-lg overflow-hidden">
              <div className="h-48 bg-gray-200"></div>
              <div className="p-6">
                <div className="h-6 bg-gray-200 rounded w-3/4 mb-4"></div>
                <div className="h-4 bg-gray-200 rounded w-5/6 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-4/6 mb-4"></div>
                <div className="h-10 bg-gray-200 rounded w-1/3 mt-6"></div>
              </div>
            </div>
          ))}
        </div>
      </div>
    );
  }
  
  return <div style={{ minHeight }}>{children}</div>;
};

// Products component
const Products = () => {
  const { isAuthenticated, isAdmin } = useAuth();
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [productList, setProductList] = useState<any[]>([]);
  const [mode, setMode] = useState<'list' | 'add' | 'edit'>('list');
  const [currentProduct, setCurrentProduct] = useState<any>(null);
  const [pageNumber, setPageNumber] = useState<number>(1);
  const [totalPages, setTotalPages] = useState<number>(1);
  
  // Default form data with proper typing
  const [formData, setFormData] = useState({
    name: '',
    description: '',
    price: 0,
    oldPrice: 0,
    badge: '',
    category: 'digital',
    productType: 'individual',
    images: [''],
    features: [''],
    enterpriseFeatures: [''],
    enterpriseSubcategory: ''
  });

  // Load products with pagination
  const fetchProducts = useCallback(async (page: number = 1) => {
    setLoading(true);
    try {
      console.log("Fetching products for page:", page);
      const response = await products.getAll(page);
      console.log("Fetched products:", response.data);
      
      // Look for pagination data in the response
      if (response.data.pagination) {
        setTotalPages(response.data.pagination.totalPages || 1);
        console.log(`Pagination: Page ${page} of ${response.data.pagination.totalPages}`);
      } else {
        console.log("No pagination data in response, setting totalPages to 1");
        setTotalPages(1);
      }
      
      // Set product data - handle different API response formats
      if (Array.isArray(response.data)) {
        setProductList(response.data);
      } else if (response.data.data && Array.isArray(response.data.data)) {
        setProductList(response.data.data);
      } else {
        console.warn("Unexpected API response format:", response.data);
        setProductList([]);
      }
    } catch (error) {
      console.error("Error fetching products:", error);
      setError(error instanceof Error ? error.message : 'Failed to fetch products');
      setProductList([]);
    } finally {
      setLoading(false);
    }
  }, []);

  // Handle page change for pagination
  const handlePageChange = (newPage: number) => {
    setPageNumber(newPage);
    fetchProducts(newPage);
  };
  
  // Initial products load
  useEffect(() => {
    if (isAuthenticated) {
      fetchProducts(pageNumber);
    }
  }, [isAuthenticated, fetchProducts, pageNumber]);

  // Handle product added event
  const onProductAdded = useCallback((newProduct: any) => {
    setProductList(prevProducts => {
      // If we have pagination and we're not on the first page,
      // we should probably refetch the current page
      if (pageNumber !== 1) {
        fetchProducts(pageNumber);
        return prevProducts;
      }
      
      // Otherwise, we can just add the new product to the list
      return [newProduct, ...prevProducts];
    });
  }, [pageNumber, fetchProducts]);

  // Handle product updated event
  const onProductUpdated = useCallback((updatedProduct: any) => {
    setProductList(prevProducts => {
      return prevProducts.map(product => {
        if ((product._id || product.id) === (updatedProduct._id || updatedProduct.id)) {
          return updatedProduct;
        }
        return product;
      });
    });
  }, []);

  // Handle product deleted event
  const onProductDeleted = useCallback((deletedProductId: string) => {
    setProductList(prevProducts => {
      return prevProducts.filter(product => {
        // Check if product ID matches the deleted ID
        const productId = product._id || product.id;
        const shouldKeep = productId !== deletedProductId;
        
        if (!shouldKeep) {
          console.log(`Removing product with ID: ${productId}`);
        }
        
        return shouldKeep;
      });
    });
  }, []);
  
  // Form input change handler
  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  // Handle array input change (for images, features, etc.)
  const handleArrayChange = (type: 'images' | 'features' | 'enterpriseFeatures', index: number, value: string) => {
    const newArray = [...formData[type]];
    newArray[index] = value;
    
    setFormData({
      ...formData,
      [type]: newArray
    });
  };
  
  // Add new array item
  const addArrayItem = (type: 'images' | 'features' | 'enterpriseFeatures') => {
    setFormData({
      ...formData,
      [type]: [...formData[type], '']
    });
  };
  
  // Remove array item
  const removeArrayItem = (type: 'images' | 'features' | 'enterpriseFeatures', index: number) => {
    const newArray = [...formData[type]];
    newArray.splice(index, 1);
    setFormData({
      ...formData,
      [type]: newArray
    });
  };

  // Handle form submission with enhanced API support and loading state
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      setLoading(true);
      
      // Filter out empty images and features
      const dataToSubmit = {
        ...formData,
        images: formData.images.filter(item => item.trim() !== ''),
        features: formData.features.filter(item => item.trim() !== ''),
        enterpriseFeatures: formData.enterpriseFeatures.filter(item => item.trim() !== '')
      };
      
      console.log("Submitting product data:", dataToSubmit);
      
      if (mode === 'add') {
        try {
          // Attempt to use the enhanced products API
          console.log("Attempting to create product via API...");
          const response = await products.create(dataToSubmit);
          console.log("Created product via API:", response.data.data);
          alert('Product created successfully!');
          
          // Call the onProductAdded callback with the data
          onProductAdded(response.data.data);
          setMode('list');
          
        } catch (error) {
          console.error("Failed to create product:", error);
          alert(`Error creating product: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      } else if (mode === 'edit' && currentProduct) {
        try {
          // Attempt to use the enhanced products API
          const productId = currentProduct._id || currentProduct.id;
          console.log(`Attempting to update product ${productId} via API...`);
          
          // Log the data being submitted
          console.log("Update payload:", dataToSubmit);
          
          const response = await products.update(productId, dataToSubmit);
          console.log("Updated product via API:", response.data.data);
          alert('Product updated successfully!');
          
          // Call the onProductUpdated callback with the data
          onProductUpdated(response.data.data);
          setMode('list');
          
        } catch (error) {
          console.error("Failed to update product:", error);
          alert(`Error updating product: ${error instanceof Error ? error.message : 'Unknown error'}`);
        }
      }
    } catch (error) {
      console.error("Form submission error:", error);
      alert(`An unexpected error occurred: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };
  
  // Handle product deletion
  const handleDeleteProduct = async (product: any) => {
    if (!window.confirm(`Are you sure you want to delete ${product.name}?`)) {
      return;
    }
    
    try {
      setLoading(true);
      const productId = product._id || product.id;
      
      console.log(`Attempting to delete product ${productId}...`);
      const response = await products.delete(productId);
      
      if (response.data.success) {
        console.log("Successfully deleted product:", productId);
        onProductDeleted(productId);
        alert('Product deleted successfully!');
      } else {
        throw new Error('API reported failure');
      }
    } catch (error) {
      console.error("Failed to delete product:", error);
      alert(`Error deleting product: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setLoading(false);
    }
  };
  
  // Handle edit action
  const handleEditProduct = (product: any) => {
    console.log("Editing product:", product);
    setCurrentProduct(product);
    setMode('edit');
    
    // Format the product data for the form
    const formattedProduct = formatProductForEdit(product);
    console.log("Formatted product data for form:", formattedProduct);
    setFormData(formattedProduct);
  };
  
  // Render product form  
  const renderForm = () => (
    <div className="bg-white rounded-lg shadow-lg border border-gray-200 p-6">
      <div className="mb-6 flex justify-between items-center">
        <h3 className="text-xl font-bold text-gray-800">
          {mode === 'add' ? 'Add New Product' : 'Edit Product'}
        </h3>
        <button
          type="button"
          onClick={() => setMode('list')}
          className="px-4 py-2 bg-gray-200 text-gray-700 rounded hover:bg-gray-300 flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-1" viewBox="0 0 20 20" fill="currentColor">
            <path fillRule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clipRule="evenodd" />
          </svg>
          Back to List
        </button>
      </div>
      
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="bg-blue-50 p-4 mb-6 rounded-md">
          <h4 className="font-medium text-blue-700 mb-2">Product Basic Information</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="name" className="block mb-2 text-sm font-medium text-gray-700">Product Name <span className="text-red-500">*</span></label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                value={formData.name} 
                onChange={handleChange} 
                required
                placeholder="Enter product name"
                className="w-full p-3 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            <div>
              <label htmlFor="price" className="block mb-2 text-sm font-medium text-gray-700">Price <span className="text-red-500">*</span></label>
              <input 
                type="number" 
                id="price" 
                name="price" 
                value={formData.price} 
                onChange={handleChange} 
                required
                min="0"
                step="0.01"
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
          </div>
        </div>
        
        <div className="bg-gray-50 p-4 mb-6 rounded-md">
          <h4 className="font-medium text-gray-700 mb-2">Additional Information</h4>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <label htmlFor="oldPrice" className="block mb-2 text-sm font-medium text-gray-700">Old Price (Optional)</label>
              <input 
                type="number" 
                id="oldPrice" 
                name="oldPrice" 
                value={formData.oldPrice} 
                onChange={handleChange}
                min="0" 
                step="0.01"
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
              />
            </div>
            
            <div>
              <label htmlFor="badge" className="block mb-2 text-sm font-medium text-gray-700">Badge</label>
              <select
                id="badge"
                name="badge"
                value={formData.badge}
                onChange={handleChange}
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
              >
                <option value="">No Badge</option>
                <option value="New">New</option>
                <option value="Best Seller">Best Seller</option>
                <option value="Popular">Popular</option>
                <option value="Premium">Premium</option>
                <option value="AI-Powered">AI-Powered</option>
                <option value="Quick Win">Quick Win</option>
                <option value="Flagship">Flagship</option>
                <option value="Enterprise">Enterprise</option>
                <option value="Teams">Teams</option>
              </select>
            </div>
          </div>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="category" className="block mb-2 text-sm font-medium text-gray-700">Category</label>
            <select
              id="category"
              name="category"
              value={formData.category}
              onChange={handleChange}
              required
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="digital">Digital</option>
              <option value="platform">Platform</option>
              <option value="service">Service</option>
            </select>
          </div>
          
          <div>
            <label htmlFor="productType" className="block mb-2 text-sm font-medium text-gray-700">Product Type</label>
            <select
              id="productType"
              name="productType"
              value={formData.productType}
              onChange={handleChange}
              required
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
            >
              <option value="individual">Individual</option>
              <option value="enterprise">Enterprise</option>
            </select>
          </div>
        </div>
        
        <div>
          <label htmlFor="description" className="block mb-2 text-sm font-medium text-gray-700">Description</label>
          <textarea 
            id="description" 
            name="description" 
            value={formData.description} 
            onChange={handleChange} 
            required
            rows={3}
            className="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
          />
        </div>
        
        <div>
          <label className="block mb-2 text-sm font-medium text-gray-700">Images</label>
          {formData.images.map((image, index) => (
            <div key={index} className="flex items-center mb-2">
              <input 
                type="text" 
                value={image} 
                onChange={(e) => handleArrayChange('images', index, e.target.value)}
                placeholder="Image URL" 
                className="flex-grow p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 mr-2"
              />
              <button
                type="button"
                onClick={() => removeArrayItem('images', index)}
                className="p-2 bg-red-500 text-white rounded-md hover:bg-red-600"
              >
                Remove
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() => addArrayItem('images')}
            className="p-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600"
          >
            Add Image
          </button>
        </div>
        
        <div>
          <label className="block mb-2 text-sm font-medium text-gray-700">Features</label>
          {formData.features.map((feature, index) => (
            <div key={index} className="flex items-center mb-2">
              <input 
                type="text" 
                value={feature} 
                onChange={(e) => handleArrayChange('features', index, e.target.value)}
                placeholder="Feature" 
                className="flex-grow p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 mr-2"
              />
              <button
                type="button"
                onClick={() => removeArrayItem('features', index)}
                className="p-2 bg-red-500 text-white rounded-md hover:bg-red-600"
              >
                Remove
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() => addArrayItem('features')}
            className="p-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600"
          >
            Add Feature
          </button>
        </div>
        
        <div>
          <label className="block mb-2 text-sm font-medium text-gray-700">Enterprise Features (for Enterprise products)</label>
          {formData.enterpriseFeatures.map((feature, index) => (
            <div key={index} className="flex items-center mb-2">
              <input 
                type="text" 
                value={feature} 
                onChange={(e) => handleArrayChange('enterpriseFeatures', index, e.target.value)}
                placeholder="Enterprise Feature" 
                className="flex-grow p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500 mr-2"
              />
              <button
                type="button"
                onClick={() => removeArrayItem('enterpriseFeatures', index)}
                className="p-2 bg-red-500 text-white rounded-md hover:bg-red-600"
              >
                Remove
              </button>
            </div>
          ))}
          <button
            type="button"
            onClick={() => addArrayItem('enterpriseFeatures')}
            className="p-2 bg-indigo-500 text-white rounded-md hover:bg-indigo-600"
          >
            Add Enterprise Feature
          </button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div>
            <label htmlFor="enterpriseSubcategory" className="block mb-2 text-sm font-medium text-gray-700">Enterprise Subcategory</label>
            <input 
              type="text" 
              id="enterpriseSubcategory" 
              name="enterpriseSubcategory" 
              value={formData.enterpriseSubcategory} 
              onChange={handleChange} 
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-indigo-500 focus:border-indigo-500"
            />
          </div>
        </div>
        
        <div className="flex justify-end space-x-3">
          <button 
            type="button"
            onClick={() => setMode('list')}
            className="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-100"
          >
            Cancel
          </button>
          <button 
            type="submit"
            disabled={loading}
            className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 disabled:opacity-50"
          >
            {loading ? 'Saving...' : (mode === 'add' ? 'Create Product' : 'Update Product')}
          </button>
        </div>
      </form>
    </div>
  );
  
  // Render product list
  const renderProductList = () => (
    <div>
      <div className="mb-6">
        <div className="bg-gradient-to-r from-indigo-100 to-blue-100 border-2 border-indigo-300 p-6 rounded-lg mb-6 shadow-md">
          <div className="flex flex-col md:flex-row items-center justify-between">
            <div className="mb-4 md:mb-0 md:mr-6">
              <h3 className="text-xl font-bold text-indigo-800 mb-2 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                Product Management
              </h3>
              <p className="text-indigo-700">As an admin, you can add, edit, or delete products from here.</p>
            </div>
            <button
              onClick={() => {
                setCurrentProduct(null);
                setFormData({
                  name: '',
                  description: '',
                  price: 0,
                  oldPrice: 0,
                  badge: '',
                  category: 'digital',
                  productType: 'individual',
                  images: [''],
                  features: [],
                  enterpriseFeatures: [],
                  enterpriseSubcategory: ''
                });
                setMode('add');
              }}
              className="px-6 py-3 bg-gradient-to-r from-indigo-600 to-blue-600 text-white rounded-lg hover:from-indigo-700 hover:to-blue-700 flex items-center shadow-lg transform transition-transform hover:scale-105"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
              </svg>
              <span className="font-bold">ADD NEW PRODUCT</span>
            </button>
          </div>
          <div className="mt-4 bg-white bg-opacity-70 p-3 rounded text-sm">
            <p className="font-medium text-gray-700">Instructions:</p>
            <ol className="list-decimal list-inside text-gray-700 mt-1">
              <li>Click <span className="font-semibold">ADD NEW PRODUCT</span> to create a new product</li>
              <li>Use the table below to edit or delete existing products</li>
            </ol>
          </div>
        </div>
      </div>
      
      {loading ? (
        <div className="text-center p-10">
          <p className="text-gray-500">Loading products...</p>
        </div>
      ) : productList.length === 0 ? (
        <div className="text-center p-10 bg-gray-50 rounded-lg">
          <p className="text-gray-500">No products found. Create a new product to get started.</p>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Product
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Category
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Type
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Price
                </th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {productList.map((product) => (
                <tr key={product._id || product.id} className={`hover:bg-gray-50 ${product.isActive === false ? 'bg-gray-100 text-gray-500' : ''}`}>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10">
                        <img 
                          className={`h-10 w-10 rounded-full object-cover ${product.isActive === false ? 'opacity-50' : ''}`}
                          src={product.images?.[0] || `https://placehold.co/100x100?text=${encodeURIComponent(product.name[0])}`} 
                          alt="" 
                        />
                      </div>
                      <div className="ml-4">
                        <div className="flex items-center">
                          <span className="text-sm font-medium text-gray-900">{product.name}</span>
                          
                          {/* Source indicator */}
                          <span className={`ml-2 text-xs font-semibold px-1.5 py-0.5 rounded ${
                            /^\d+$/.test(product._id) || /^[0-9a-fA-F]{24}$/.test(product._id) 
                              ? 'bg-green-100 text-green-800' 
                              : 'bg-yellow-100 text-yellow-800'
                          }`}>
                            {/^\d+$/.test(product._id) || /^[0-9a-fA-F]{24}$/.test(product._id) ? 'API' : 'Local'}
                          </span>
                          
                          {/* Deleted indicator */}
                          {product.isActive === false && (
                            <span className="ml-2 text-xs font-semibold px-1.5 py-0.5 rounded bg-red-100 text-red-800">
                              Deleted
                            </span>
                          )}
                        </div>
                        <div className="text-sm text-gray-500 truncate max-w-xs">
                          {product.description}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-blue-100 text-blue-800">
                      {product.category}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className="px-2 inline-flex text-xs leading-5 font-semibold rounded-full bg-purple-100 text-purple-800">
                      {product.productType}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    ₹{product.price}
                    {product.oldPrice && (
                      <span className="text-gray-400 line-through ml-2">₹{product.oldPrice}</span>
                    )}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <button
                      onClick={() => handleEditProduct(product)}
                      className="text-indigo-600 hover:text-indigo-900 mr-4"
                    >
                      Edit
                    </button>
                    <button
                      onClick={() => handleDeleteProduct(product)}
                      disabled={loading || product.isActive === false}
                      className={`${loading || product.isActive === false ? 'text-gray-400 cursor-not-allowed' : 'text-red-600 hover:text-red-900'} 
                        focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 transition-colors`}
                    >
                      {loading ? (
                        <span className="flex items-center">
                          <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-red-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                            <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                            <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                          </svg>
                          Deleting...
                        </span>
                      ) : product.isActive === false ? 'Deleted' : 'Delete'}
                    </button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      
      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex justify-center mt-6">
          <nav className="relative z-0 inline-flex shadow-sm -space-x-px" aria-label="Pagination">
            <button
              onClick={() => handlePageChange(pageNumber - 1)}
              disabled={pageNumber === 1}
              className={`${pageNumber === 1 ? 'cursor-not-allowed opacity-50' : 'hover:bg-gray-50'} relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500`}
            >
              <span className="sr-only">Previous</span>
              <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fillRule="evenodd" d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z" clipRule="evenodd" />
              </svg>
            </button>
            
            {[...Array(totalPages)].map((_, i) => (
              <button
                key={i}
                onClick={() => handlePageChange(i + 1)}
                className={`${pageNumber === i + 1 ? 'bg-indigo-50 border-indigo-500 text-indigo-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'} relative inline-flex items-center px-4 py-2 border text-sm font-medium`}
              >
                {i + 1}
              </button>
            ))}
            
            <button
              onClick={() => handlePageChange(pageNumber + 1)}
              disabled={pageNumber === totalPages}
              className={`${pageNumber === totalPages ? 'cursor-not-allowed opacity-50' : 'hover:bg-gray-50'} relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500`}
            >
              <span className="sr-only">Next</span>
              <svg className="h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
                <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
              </svg>
            </button>
          </nav>
        </div>
      )}
    </div>
  );
  
  return (
    <div>
      <ProductsWrapper loading={loading}>
        {mode === 'list' && renderProductList()}
        {(mode === 'add' || mode === 'edit') && renderForm()}
      </ProductsWrapper>
    </div>
  );
};

export default Products;
